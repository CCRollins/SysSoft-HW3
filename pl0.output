Terminals unused in grammar

    "."
    ";"
    "("
    ")"


Rules useless in parser due to conflicts

   50 expr: expr "+" term
   51     | expr "-" term

   53 term: term "*" factor
   54     | term "/" factor

   55 factor: identsym


State 11 conflicts: 1 shift/reduce
State 46 conflicts: 24 reduce/reduce
State 53 conflicts: 10 shift/reduce
State 55 conflicts: 2 shift/reduce
State 60 conflicts: 4 shift/reduce, 11 reduce/reduce
State 61 conflicts: 4 shift/reduce, 11 reduce/reduce
State 64 conflicts: 4 shift/reduce, 2 reduce/reduce
State 66 conflicts: 1 shift/reduce
State 81 conflicts: 4 shift/reduce
State 82 conflicts: 2 shift/reduce, 24 reduce/reduce
State 83 conflicts: 12 reduce/reduce
State 84 conflicts: 2 shift/reduce, 24 reduce/reduce
State 85 conflicts: 4 shift/reduce, 24 reduce/reduce
State 86 conflicts: 4 shift/reduce, 6 reduce/reduce
State 87 conflicts: 24 reduce/reduce
State 88 conflicts: 24 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: block

    2 block: constDecls varDecls procDecls stmt

    3 constDecls: empty
    4           | constDecl

    5 constDecl: "const" constDefs

    6 constDefs: constDef
    7          | constDefs "," constDef

    8 constDef: identsym "=" numbersym

    9 varDecls: %empty
   10         | varDecl

   11 varDecl: "var" idents

   12 idents: %empty
   13       | identsym

   14 procDecls: %empty
   15          | procDecl

   16 procDecl: "procedure" identsym block

   17 stmt: assignStmt
   18     | callStmt
   19     | beginStmt
   20     | ifStmt
   21     | whileStmt
   22     | readStmt
   23     | writeStmt
   24     | skipStmt

   25 assignStmt: identsym ":=" expr

   26 stmts: %empty
   27      | stmt

   28 callStmt: "call" identsym

   29 beginStmt: "begin" stmts "end"

   30 ifStmt: "if" condition "then" stmt "else" stmt "end"

   31 whileStmt: "while" condition "do" stmt "end"

   32 readStmt: "read" identsym

   33 writeStmt: "write" expr

   34 skipStmt: "skip"

   35 condition: oddCondition
   36          | relOpCondition

   37 oddCondition: "odd" expr

   38 expr: expr relOpCondition expr
   39     | identsym
   40     | numbersym

   41 relOpCondition: expr relOp expr

   42 relOp: "="
   43      | "<>"
   44      | "<"
   45      | "<="
   46      | ">"
   47      | ">="

   48 empty: %empty

   49 expr: term
   50     | expr "+" term
   51     | expr "-" term

   52 term: factor
   53     | term "*" factor
   54     | term "/" factor

   55 factor: identsym
   56       | "-" numbersym
   57       | posSign numbersym
   58       | expr

   59 posSign: "+"


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 8 13 16 25 28 32 39 55
    numbersym <number> (259) 8 40 56 57
    "+" <token> (260) 50 59
    "-" <token> (261) 51 56
    "*" <token> (262) 53
    "/" <token> (263) 54
    "." <token> (264)
    ";" <token> (265)
    "=" <token> (266) 8 42
    "," <token> (267) 7
    ":=" <token> (268) 25
    "const" <token> (269) 5
    "var" <token> (270) 11
    "procedure" <token> (271) 16
    "call" <token> (272) 28
    "begin" <token> (273) 29
    "end" <token> (274) 29 30 31
    "if" <token> (275) 30
    "then" <token> (276) 30
    "else" <token> (277) 30
    "while" <token> (278) 31
    "do" <token> (279) 31
    "read" <token> (280) 32
    "write" <token> (281) 33
    "skip" <token> (282) 34
    "odd" <token> (283) 37
    "<>" <token> (284) 43
    "<" <token> (285) 44
    "<=" <token> (286) 45
    ">" <token> (287) 46
    ">=" <token> (288) 47
    "(" <token> (289)
    ")" <token> (290)


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program <block> (37)
        on left: 1
        on right: 0
    block <block> (38)
        on left: 2
        on right: 1 16
    constDecls <const_decls> (39)
        on left: 3 4
        on right: 2
    constDecl <const_decl> (40)
        on left: 5
        on right: 4
    constDefs <const_defs> (41)
        on left: 6 7
        on right: 5 7
    constDef <const_def> (42)
        on left: 8
        on right: 6 7
    varDecls <var_decls> (43)
        on left: 9 10
        on right: 2
    varDecl <var_decl> (44)
        on left: 11
        on right: 10
    idents <idents> (45)
        on left: 12 13
        on right: 11
    procDecls <proc_decls> (46)
        on left: 14 15
        on right: 2
    procDecl <proc_decl> (47)
        on left: 16
        on right: 15
    stmt <stmt> (48)
        on left: 17 18 19 20 21 22 23 24
        on right: 2 27 30 31
    assignStmt <assign_stmt_t> (49)
        on left: 25
        on right: 17
    stmts <stmts> (50)
        on left: 26 27
        on right: 29
    callStmt <call_stmt_t> (51)
        on left: 28
        on right: 18
    beginStmt <begin_stmt_t> (52)
        on left: 29
        on right: 19
    ifStmt <if_stmt_t> (53)
        on left: 30
        on right: 20
    whileStmt <while_stmt_t> (54)
        on left: 31
        on right: 21
    readStmt <read_stmt_t> (55)
        on left: 32
        on right: 22
    writeStmt <write_stmt_t> (56)
        on left: 33
        on right: 23
    skipStmt <skip_stmt_t> (57)
        on left: 34
        on right: 24
    condition <condition> (58)
        on left: 35 36
        on right: 30 31
    oddCondition <odd_condition> (59)
        on left: 37
        on right: 35
    expr <expr> (60)
        on left: 38 39 40 49 50 51
        on right: 25 33 37 38 41 50 51 58
    relOpCondition <rel_op_condition> (61)
        on left: 41
        on right: 36 38
    relOp <token> (62)
        on left: 42 43 44 45 46 47
        on right: 41
    empty <empty> (63)
        on left: 48
        on right: 3
    term <expr> (64)
        on left: 52 53 54
        on right: 49 50 51 53 54
    factor <expr> (65)
        on left: 55 56 57 58
        on right: 52 53 54
    posSign <token> (66)
        on left: 59
        on right: 57


State 0

    0 $accept: . program $end

    "const"  shift, and go to state 1

    $default  reduce using rule 48 (empty)

    program     go to state 2
    block       go to state 3
    constDecls  go to state 4
    constDecl   go to state 5
    empty       go to state 6


State 1

    5 constDecl: "const" . constDefs

    identsym  shift, and go to state 7

    constDefs  go to state 8
    constDef   go to state 9


State 2

    0 $accept: program . $end

    $end  shift, and go to state 10


State 3

    1 program: block .

    $default  reduce using rule 1 (program)


State 4

    2 block: constDecls . varDecls procDecls stmt

    "var"  shift, and go to state 11

    $default  reduce using rule 9 (varDecls)

    varDecls  go to state 12
    varDecl   go to state 13


State 5

    4 constDecls: constDecl .

    $default  reduce using rule 4 (constDecls)


State 6

    3 constDecls: empty .

    $default  reduce using rule 3 (constDecls)


State 7

    8 constDef: identsym . "=" numbersym

    "="  shift, and go to state 14


State 8

    5 constDecl: "const" constDefs .
    7 constDefs: constDefs . "," constDef

    ","  shift, and go to state 15

    $default  reduce using rule 5 (constDecl)


State 9

    6 constDefs: constDef .

    $default  reduce using rule 6 (constDefs)


State 10

    0 $accept: program $end .

    $default  accept


State 11

   11 varDecl: "var" . idents

    identsym  shift, and go to state 16

    identsym  [reduce using rule 12 (idents)]
    $default  reduce using rule 12 (idents)

    idents  go to state 17


State 12

    2 block: constDecls varDecls . procDecls stmt

    "procedure"  shift, and go to state 18

    $default  reduce using rule 14 (procDecls)

    procDecls  go to state 19
    procDecl   go to state 20


State 13

   10 varDecls: varDecl .

    $default  reduce using rule 10 (varDecls)


State 14

    8 constDef: identsym "=" . numbersym

    numbersym  shift, and go to state 21


State 15

    7 constDefs: constDefs "," . constDef

    identsym  shift, and go to state 7

    constDef  go to state 22


State 16

   13 idents: identsym .

    $default  reduce using rule 13 (idents)


State 17

   11 varDecl: "var" idents .

    $default  reduce using rule 11 (varDecl)


State 18

   16 procDecl: "procedure" . identsym block

    identsym  shift, and go to state 23


State 19

    2 block: constDecls varDecls procDecls . stmt

    identsym  shift, and go to state 24
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 26
    "if"      shift, and go to state 27
    "while"   shift, and go to state 28
    "read"    shift, and go to state 29
    "write"   shift, and go to state 30
    "skip"    shift, and go to state 31

    stmt        go to state 32
    assignStmt  go to state 33
    callStmt    go to state 34
    beginStmt   go to state 35
    ifStmt      go to state 36
    whileStmt   go to state 37
    readStmt    go to state 38
    writeStmt   go to state 39
    skipStmt    go to state 40


State 20

   15 procDecls: procDecl .

    $default  reduce using rule 15 (procDecls)


State 21

    8 constDef: identsym "=" numbersym .

    $default  reduce using rule 8 (constDef)


State 22

    7 constDefs: constDefs "," constDef .

    $default  reduce using rule 7 (constDefs)


State 23

   16 procDecl: "procedure" identsym . block

    "const"  shift, and go to state 1

    $default  reduce using rule 48 (empty)

    block       go to state 41
    constDecls  go to state 4
    constDecl   go to state 5
    empty       go to state 6


State 24

   25 assignStmt: identsym . ":=" expr

    ":="  shift, and go to state 42


State 25

   28 callStmt: "call" . identsym

    identsym  shift, and go to state 43


State 26

   29 beginStmt: "begin" . stmts "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 26
    "if"      shift, and go to state 27
    "while"   shift, and go to state 28
    "read"    shift, and go to state 29
    "write"   shift, and go to state 30
    "skip"    shift, and go to state 31

    $default  reduce using rule 26 (stmts)

    stmt        go to state 44
    assignStmt  go to state 33
    stmts       go to state 45
    callStmt    go to state 34
    beginStmt   go to state 35
    ifStmt      go to state 36
    whileStmt   go to state 37
    readStmt    go to state 38
    writeStmt   go to state 39
    skipStmt    go to state 40


State 27

   30 ifStmt: "if" . condition "then" stmt "else" stmt "end"

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 48
    "-"        shift, and go to state 49
    "odd"      shift, and go to state 50

    condition       go to state 51
    oddCondition    go to state 52
    expr            go to state 53
    relOpCondition  go to state 54
    term            go to state 55
    factor          go to state 56
    posSign         go to state 57


State 28

   31 whileStmt: "while" . condition "do" stmt "end"

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 48
    "-"        shift, and go to state 49
    "odd"      shift, and go to state 50

    condition       go to state 58
    oddCondition    go to state 52
    expr            go to state 53
    relOpCondition  go to state 54
    term            go to state 55
    factor          go to state 56
    posSign         go to state 57


State 29

   32 readStmt: "read" . identsym

    identsym  shift, and go to state 59


State 30

   33 writeStmt: "write" . expr

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 48
    "-"        shift, and go to state 49

    expr     go to state 60
    term     go to state 55
    factor   go to state 56
    posSign  go to state 57


State 31

   34 skipStmt: "skip" .

    $default  reduce using rule 34 (skipStmt)


State 32

    2 block: constDecls varDecls procDecls stmt .

    $default  reduce using rule 2 (block)


State 33

   17 stmt: assignStmt .

    $default  reduce using rule 17 (stmt)


State 34

   18 stmt: callStmt .

    $default  reduce using rule 18 (stmt)


State 35

   19 stmt: beginStmt .

    $default  reduce using rule 19 (stmt)


State 36

   20 stmt: ifStmt .

    $default  reduce using rule 20 (stmt)


State 37

   21 stmt: whileStmt .

    $default  reduce using rule 21 (stmt)


State 38

   22 stmt: readStmt .

    $default  reduce using rule 22 (stmt)


State 39

   23 stmt: writeStmt .

    $default  reduce using rule 23 (stmt)


State 40

   24 stmt: skipStmt .

    $default  reduce using rule 24 (stmt)


State 41

   16 procDecl: "procedure" identsym block .

    $default  reduce using rule 16 (procDecl)


State 42

   25 assignStmt: identsym ":=" . expr

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 48
    "-"        shift, and go to state 49

    expr     go to state 61
    term     go to state 55
    factor   go to state 56
    posSign  go to state 57


State 43

   28 callStmt: "call" identsym .

    $default  reduce using rule 28 (callStmt)


State 44

   27 stmts: stmt .

    $default  reduce using rule 27 (stmts)


State 45

   29 beginStmt: "begin" stmts . "end"

    "end"  shift, and go to state 62


State 46

   39 expr: identsym .
   55 factor: identsym .

    $end       reduce using rule 39 (expr)
    $end       [reduce using rule 55 (factor)]
    identsym   reduce using rule 39 (expr)
    identsym   [reduce using rule 55 (factor)]
    numbersym  reduce using rule 39 (expr)
    numbersym  [reduce using rule 55 (factor)]
    "+"        reduce using rule 39 (expr)
    "+"        [reduce using rule 55 (factor)]
    "-"        reduce using rule 39 (expr)
    "-"        [reduce using rule 55 (factor)]
    "*"        reduce using rule 39 (expr)
    "*"        [reduce using rule 55 (factor)]
    "/"        reduce using rule 39 (expr)
    "/"        [reduce using rule 55 (factor)]
    "="        reduce using rule 39 (expr)
    "="        [reduce using rule 55 (factor)]
    "call"     reduce using rule 39 (expr)
    "call"     [reduce using rule 55 (factor)]
    "begin"    reduce using rule 39 (expr)
    "begin"    [reduce using rule 55 (factor)]
    "end"      reduce using rule 39 (expr)
    "end"      [reduce using rule 55 (factor)]
    "if"       reduce using rule 39 (expr)
    "if"       [reduce using rule 55 (factor)]
    "then"     reduce using rule 39 (expr)
    "then"     [reduce using rule 55 (factor)]
    "else"     reduce using rule 39 (expr)
    "else"     [reduce using rule 55 (factor)]
    "while"    reduce using rule 39 (expr)
    "while"    [reduce using rule 55 (factor)]
    "do"       reduce using rule 39 (expr)
    "do"       [reduce using rule 55 (factor)]
    "read"     reduce using rule 39 (expr)
    "read"     [reduce using rule 55 (factor)]
    "write"    reduce using rule 39 (expr)
    "write"    [reduce using rule 55 (factor)]
    "skip"     reduce using rule 39 (expr)
    "skip"     [reduce using rule 55 (factor)]
    "<>"       reduce using rule 39 (expr)
    "<>"       [reduce using rule 55 (factor)]
    "<"        reduce using rule 39 (expr)
    "<"        [reduce using rule 55 (factor)]
    "<="       reduce using rule 39 (expr)
    "<="       [reduce using rule 55 (factor)]
    ">"        reduce using rule 39 (expr)
    ">"        [reduce using rule 55 (factor)]
    ">="       reduce using rule 39 (expr)
    ">="       [reduce using rule 55 (factor)]
    $default   reduce using rule 39 (expr)


State 47

   40 expr: numbersym .

    $default  reduce using rule 40 (expr)


State 48

   59 posSign: "+" .

    $default  reduce using rule 59 (posSign)


State 49

   56 factor: "-" . numbersym

    numbersym  shift, and go to state 63


State 50

   37 oddCondition: "odd" . expr

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 48
    "-"        shift, and go to state 49

    expr     go to state 64
    term     go to state 55
    factor   go to state 56
    posSign  go to state 57


State 51

   30 ifStmt: "if" condition . "then" stmt "else" stmt "end"

    "then"  shift, and go to state 65


State 52

   35 condition: oddCondition .

    $default  reduce using rule 35 (condition)


State 53

   38 expr: expr . relOpCondition expr
   41 relOpCondition: expr . relOp expr
   50 expr: expr . "+" term
   51     | expr . "-" term
   58 factor: expr .

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 66
    "-"        shift, and go to state 67
    "="        shift, and go to state 68
    "<>"       shift, and go to state 69
    "<"        shift, and go to state 70
    "<="       shift, and go to state 71
    ">"        shift, and go to state 72
    ">="       shift, and go to state 73

    identsym   [reduce using rule 58 (factor)]
    numbersym  [reduce using rule 58 (factor)]
    "+"        [reduce using rule 58 (factor)]
    "-"        [reduce using rule 58 (factor)]
    "="        [reduce using rule 58 (factor)]
    "<>"       [reduce using rule 58 (factor)]
    "<"        [reduce using rule 58 (factor)]
    "<="       [reduce using rule 58 (factor)]
    ">"        [reduce using rule 58 (factor)]
    ">="       [reduce using rule 58 (factor)]
    $default   reduce using rule 58 (factor)

    expr            go to state 53
    relOpCondition  go to state 74
    relOp           go to state 75
    term            go to state 55
    factor          go to state 56
    posSign         go to state 57


State 54

   36 condition: relOpCondition .

    $default  reduce using rule 36 (condition)


State 55

   49 expr: term .
   53 term: term . "*" factor
   54     | term . "/" factor

    "*"  shift, and go to state 76
    "/"  shift, and go to state 77

    "*"       [reduce using rule 49 (expr)]
    "/"       [reduce using rule 49 (expr)]
    $default  reduce using rule 49 (expr)


State 56

   52 term: factor .

    $default  reduce using rule 52 (term)


State 57

   57 factor: posSign . numbersym

    numbersym  shift, and go to state 78


State 58

   31 whileStmt: "while" condition . "do" stmt "end"

    "do"  shift, and go to state 79


State 59

   32 readStmt: "read" identsym .

    $default  reduce using rule 32 (readStmt)


State 60

   33 writeStmt: "write" expr .
   38 expr: expr . relOpCondition expr
   50     | expr . "+" term
   51     | expr . "-" term
   58 factor: expr .

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 66
    "-"        shift, and go to state 67

    $end       reduce using rule 33 (writeStmt)
    $end       [reduce using rule 58 (factor)]
    identsym   [reduce using rule 33 (writeStmt)]
    identsym   [reduce using rule 58 (factor)]
    numbersym  [reduce using rule 58 (factor)]
    "+"        [reduce using rule 58 (factor)]
    "-"        [reduce using rule 58 (factor)]
    "*"        reduce using rule 58 (factor)
    "/"        reduce using rule 58 (factor)
    "call"     reduce using rule 33 (writeStmt)
    "call"     [reduce using rule 58 (factor)]
    "begin"    reduce using rule 33 (writeStmt)
    "begin"    [reduce using rule 58 (factor)]
    "end"      reduce using rule 33 (writeStmt)
    "end"      [reduce using rule 58 (factor)]
    "if"       reduce using rule 33 (writeStmt)
    "if"       [reduce using rule 58 (factor)]
    "else"     reduce using rule 33 (writeStmt)
    "else"     [reduce using rule 58 (factor)]
    "while"    reduce using rule 33 (writeStmt)
    "while"    [reduce using rule 58 (factor)]
    "read"     reduce using rule 33 (writeStmt)
    "read"     [reduce using rule 58 (factor)]
    "write"    reduce using rule 33 (writeStmt)
    "write"    [reduce using rule 58 (factor)]
    "skip"     reduce using rule 33 (writeStmt)
    "skip"     [reduce using rule 58 (factor)]
    $default   reduce using rule 33 (writeStmt)

    expr            go to state 53
    relOpCondition  go to state 74
    term            go to state 55
    factor          go to state 56
    posSign         go to state 57


State 61

   25 assignStmt: identsym ":=" expr .
   38 expr: expr . relOpCondition expr
   50     | expr . "+" term
   51     | expr . "-" term
   58 factor: expr .

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 66
    "-"        shift, and go to state 67

    $end       reduce using rule 25 (assignStmt)
    $end       [reduce using rule 58 (factor)]
    identsym   [reduce using rule 25 (assignStmt)]
    identsym   [reduce using rule 58 (factor)]
    numbersym  [reduce using rule 58 (factor)]
    "+"        [reduce using rule 58 (factor)]
    "-"        [reduce using rule 58 (factor)]
    "*"        reduce using rule 58 (factor)
    "/"        reduce using rule 58 (factor)
    "call"     reduce using rule 25 (assignStmt)
    "call"     [reduce using rule 58 (factor)]
    "begin"    reduce using rule 25 (assignStmt)
    "begin"    [reduce using rule 58 (factor)]
    "end"      reduce using rule 25 (assignStmt)
    "end"      [reduce using rule 58 (factor)]
    "if"       reduce using rule 25 (assignStmt)
    "if"       [reduce using rule 58 (factor)]
    "else"     reduce using rule 25 (assignStmt)
    "else"     [reduce using rule 58 (factor)]
    "while"    reduce using rule 25 (assignStmt)
    "while"    [reduce using rule 58 (factor)]
    "read"     reduce using rule 25 (assignStmt)
    "read"     [reduce using rule 58 (factor)]
    "write"    reduce using rule 25 (assignStmt)
    "write"    [reduce using rule 58 (factor)]
    "skip"     reduce using rule 25 (assignStmt)
    "skip"     [reduce using rule 58 (factor)]
    $default   reduce using rule 25 (assignStmt)

    expr            go to state 53
    relOpCondition  go to state 74
    term            go to state 55
    factor          go to state 56
    posSign         go to state 57


State 62

   29 beginStmt: "begin" stmts "end" .

    $default  reduce using rule 29 (beginStmt)


State 63

   56 factor: "-" numbersym .

    $default  reduce using rule 56 (factor)


State 64

   37 oddCondition: "odd" expr .
   38 expr: expr . relOpCondition expr
   50     | expr . "+" term
   51     | expr . "-" term
   58 factor: expr .

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 66
    "-"        shift, and go to state 67

    identsym   [reduce using rule 58 (factor)]
    numbersym  [reduce using rule 58 (factor)]
    "+"        [reduce using rule 58 (factor)]
    "-"        [reduce using rule 58 (factor)]
    "*"        reduce using rule 58 (factor)
    "/"        reduce using rule 58 (factor)
    "then"     reduce using rule 37 (oddCondition)
    "then"     [reduce using rule 58 (factor)]
    "do"       reduce using rule 37 (oddCondition)
    "do"       [reduce using rule 58 (factor)]
    $default   reduce using rule 37 (oddCondition)

    expr            go to state 53
    relOpCondition  go to state 74
    term            go to state 55
    factor          go to state 56
    posSign         go to state 57


State 65

   30 ifStmt: "if" condition "then" . stmt "else" stmt "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 26
    "if"      shift, and go to state 27
    "while"   shift, and go to state 28
    "read"    shift, and go to state 29
    "write"   shift, and go to state 30
    "skip"    shift, and go to state 31

    stmt        go to state 80
    assignStmt  go to state 33
    callStmt    go to state 34
    beginStmt   go to state 35
    ifStmt      go to state 36
    whileStmt   go to state 37
    readStmt    go to state 38
    writeStmt   go to state 39
    skipStmt    go to state 40


State 66

   50 expr: expr "+" . term
   59 posSign: "+" .

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 48
    "-"        shift, and go to state 49

    numbersym  [reduce using rule 59 (posSign)]

    expr     go to state 81
    term     go to state 82
    factor   go to state 56
    posSign  go to state 57


State 67

   51 expr: expr "-" . term
   56 factor: "-" . numbersym

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 83
    "+"        shift, and go to state 48
    "-"        shift, and go to state 49

    expr     go to state 81
    term     go to state 84
    factor   go to state 56
    posSign  go to state 57


State 68

   42 relOp: "=" .

    $default  reduce using rule 42 (relOp)


State 69

   43 relOp: "<>" .

    $default  reduce using rule 43 (relOp)


State 70

   44 relOp: "<" .

    $default  reduce using rule 44 (relOp)


State 71

   45 relOp: "<=" .

    $default  reduce using rule 45 (relOp)


State 72

   46 relOp: ">" .

    $default  reduce using rule 46 (relOp)


State 73

   47 relOp: ">=" .

    $default  reduce using rule 47 (relOp)


State 74

   38 expr: expr relOpCondition . expr

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 48
    "-"        shift, and go to state 49

    expr     go to state 85
    term     go to state 55
    factor   go to state 56
    posSign  go to state 57


State 75

   41 relOpCondition: expr relOp . expr

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 48
    "-"        shift, and go to state 49

    expr     go to state 86
    term     go to state 55
    factor   go to state 56
    posSign  go to state 57


State 76

   53 term: term "*" . factor

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 48
    "-"        shift, and go to state 49

    expr     go to state 81
    term     go to state 55
    factor   go to state 87
    posSign  go to state 57


State 77

   54 term: term "/" . factor

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 48
    "-"        shift, and go to state 49

    expr     go to state 81
    term     go to state 55
    factor   go to state 88
    posSign  go to state 57


State 78

   57 factor: posSign numbersym .

    $default  reduce using rule 57 (factor)


State 79

   31 whileStmt: "while" condition "do" . stmt "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 26
    "if"      shift, and go to state 27
    "while"   shift, and go to state 28
    "read"    shift, and go to state 29
    "write"   shift, and go to state 30
    "skip"    shift, and go to state 31

    stmt        go to state 89
    assignStmt  go to state 33
    callStmt    go to state 34
    beginStmt   go to state 35
    ifStmt      go to state 36
    whileStmt   go to state 37
    readStmt    go to state 38
    writeStmt   go to state 39
    skipStmt    go to state 40


State 80

   30 ifStmt: "if" condition "then" stmt . "else" stmt "end"

    "else"  shift, and go to state 90


State 81

   38 expr: expr . relOpCondition expr
   50     | expr . "+" term
   51     | expr . "-" term
   58 factor: expr .

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 66
    "-"        shift, and go to state 67

    identsym   [reduce using rule 58 (factor)]
    numbersym  [reduce using rule 58 (factor)]
    "+"        [reduce using rule 58 (factor)]
    "-"        [reduce using rule 58 (factor)]
    $default   reduce using rule 58 (factor)

    expr            go to state 53
    relOpCondition  go to state 74
    term            go to state 55
    factor          go to state 56
    posSign         go to state 57


State 82

   49 expr: term .
   50     | expr "+" term .
   53 term: term . "*" factor
   54     | term . "/" factor

    "*"  shift, and go to state 76
    "/"  shift, and go to state 77

    $end       reduce using rule 49 (expr)
    $end       [reduce using rule 50 (expr)]
    identsym   reduce using rule 49 (expr)
    identsym   [reduce using rule 50 (expr)]
    numbersym  reduce using rule 49 (expr)
    numbersym  [reduce using rule 50 (expr)]
    "+"        reduce using rule 49 (expr)
    "+"        [reduce using rule 50 (expr)]
    "-"        reduce using rule 49 (expr)
    "-"        [reduce using rule 50 (expr)]
    "*"        [reduce using rule 49 (expr)]
    "*"        [reduce using rule 50 (expr)]
    "/"        [reduce using rule 49 (expr)]
    "/"        [reduce using rule 50 (expr)]
    "="        reduce using rule 49 (expr)
    "="        [reduce using rule 50 (expr)]
    "call"     reduce using rule 49 (expr)
    "call"     [reduce using rule 50 (expr)]
    "begin"    reduce using rule 49 (expr)
    "begin"    [reduce using rule 50 (expr)]
    "end"      reduce using rule 49 (expr)
    "end"      [reduce using rule 50 (expr)]
    "if"       reduce using rule 49 (expr)
    "if"       [reduce using rule 50 (expr)]
    "then"     reduce using rule 49 (expr)
    "then"     [reduce using rule 50 (expr)]
    "else"     reduce using rule 49 (expr)
    "else"     [reduce using rule 50 (expr)]
    "while"    reduce using rule 49 (expr)
    "while"    [reduce using rule 50 (expr)]
    "do"       reduce using rule 49 (expr)
    "do"       [reduce using rule 50 (expr)]
    "read"     reduce using rule 49 (expr)
    "read"     [reduce using rule 50 (expr)]
    "write"    reduce using rule 49 (expr)
    "write"    [reduce using rule 50 (expr)]
    "skip"     reduce using rule 49 (expr)
    "skip"     [reduce using rule 50 (expr)]
    "<>"       reduce using rule 49 (expr)
    "<>"       [reduce using rule 50 (expr)]
    "<"        reduce using rule 49 (expr)
    "<"        [reduce using rule 50 (expr)]
    "<="       reduce using rule 49 (expr)
    "<="       [reduce using rule 50 (expr)]
    ">"        reduce using rule 49 (expr)
    ">"        [reduce using rule 50 (expr)]
    ">="       reduce using rule 49 (expr)
    ">="       [reduce using rule 50 (expr)]
    $default   reduce using rule 49 (expr)


State 83

   40 expr: numbersym .
   56 factor: "-" numbersym .

    identsym   reduce using rule 40 (expr)
    identsym   [reduce using rule 56 (factor)]
    numbersym  reduce using rule 40 (expr)
    numbersym  [reduce using rule 56 (factor)]
    "+"        reduce using rule 40 (expr)
    "+"        [reduce using rule 56 (factor)]
    "-"        reduce using rule 40 (expr)
    "-"        [reduce using rule 56 (factor)]
    "*"        reduce using rule 40 (expr)
    "*"        [reduce using rule 56 (factor)]
    "/"        reduce using rule 40 (expr)
    "/"        [reduce using rule 56 (factor)]
    "="        reduce using rule 40 (expr)
    "="        [reduce using rule 56 (factor)]
    "<>"       reduce using rule 40 (expr)
    "<>"       [reduce using rule 56 (factor)]
    "<"        reduce using rule 40 (expr)
    "<"        [reduce using rule 56 (factor)]
    "<="       reduce using rule 40 (expr)
    "<="       [reduce using rule 56 (factor)]
    ">"        reduce using rule 40 (expr)
    ">"        [reduce using rule 56 (factor)]
    ">="       reduce using rule 40 (expr)
    ">="       [reduce using rule 56 (factor)]
    $default   reduce using rule 40 (expr)


State 84

   49 expr: term .
   51     | expr "-" term .
   53 term: term . "*" factor
   54     | term . "/" factor

    "*"  shift, and go to state 76
    "/"  shift, and go to state 77

    $end       reduce using rule 49 (expr)
    $end       [reduce using rule 51 (expr)]
    identsym   reduce using rule 49 (expr)
    identsym   [reduce using rule 51 (expr)]
    numbersym  reduce using rule 49 (expr)
    numbersym  [reduce using rule 51 (expr)]
    "+"        reduce using rule 49 (expr)
    "+"        [reduce using rule 51 (expr)]
    "-"        reduce using rule 49 (expr)
    "-"        [reduce using rule 51 (expr)]
    "*"        [reduce using rule 49 (expr)]
    "*"        [reduce using rule 51 (expr)]
    "/"        [reduce using rule 49 (expr)]
    "/"        [reduce using rule 51 (expr)]
    "="        reduce using rule 49 (expr)
    "="        [reduce using rule 51 (expr)]
    "call"     reduce using rule 49 (expr)
    "call"     [reduce using rule 51 (expr)]
    "begin"    reduce using rule 49 (expr)
    "begin"    [reduce using rule 51 (expr)]
    "end"      reduce using rule 49 (expr)
    "end"      [reduce using rule 51 (expr)]
    "if"       reduce using rule 49 (expr)
    "if"       [reduce using rule 51 (expr)]
    "then"     reduce using rule 49 (expr)
    "then"     [reduce using rule 51 (expr)]
    "else"     reduce using rule 49 (expr)
    "else"     [reduce using rule 51 (expr)]
    "while"    reduce using rule 49 (expr)
    "while"    [reduce using rule 51 (expr)]
    "do"       reduce using rule 49 (expr)
    "do"       [reduce using rule 51 (expr)]
    "read"     reduce using rule 49 (expr)
    "read"     [reduce using rule 51 (expr)]
    "write"    reduce using rule 49 (expr)
    "write"    [reduce using rule 51 (expr)]
    "skip"     reduce using rule 49 (expr)
    "skip"     [reduce using rule 51 (expr)]
    "<>"       reduce using rule 49 (expr)
    "<>"       [reduce using rule 51 (expr)]
    "<"        reduce using rule 49 (expr)
    "<"        [reduce using rule 51 (expr)]
    "<="       reduce using rule 49 (expr)
    "<="       [reduce using rule 51 (expr)]
    ">"        reduce using rule 49 (expr)
    ">"        [reduce using rule 51 (expr)]
    ">="       reduce using rule 49 (expr)
    ">="       [reduce using rule 51 (expr)]
    $default   reduce using rule 49 (expr)


State 85

   38 expr: expr . relOpCondition expr
   38     | expr relOpCondition expr .
   50     | expr . "+" term
   51     | expr . "-" term
   58 factor: expr .

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 66
    "-"        shift, and go to state 67

    $end       reduce using rule 38 (expr)
    $end       [reduce using rule 58 (factor)]
    identsym   [reduce using rule 38 (expr)]
    identsym   [reduce using rule 58 (factor)]
    numbersym  [reduce using rule 38 (expr)]
    numbersym  [reduce using rule 58 (factor)]
    "+"        [reduce using rule 38 (expr)]
    "+"        [reduce using rule 58 (factor)]
    "-"        [reduce using rule 38 (expr)]
    "-"        [reduce using rule 58 (factor)]
    "*"        reduce using rule 38 (expr)
    "*"        [reduce using rule 58 (factor)]
    "/"        reduce using rule 38 (expr)
    "/"        [reduce using rule 58 (factor)]
    "="        reduce using rule 38 (expr)
    "="        [reduce using rule 58 (factor)]
    "call"     reduce using rule 38 (expr)
    "call"     [reduce using rule 58 (factor)]
    "begin"    reduce using rule 38 (expr)
    "begin"    [reduce using rule 58 (factor)]
    "end"      reduce using rule 38 (expr)
    "end"      [reduce using rule 58 (factor)]
    "if"       reduce using rule 38 (expr)
    "if"       [reduce using rule 58 (factor)]
    "then"     reduce using rule 38 (expr)
    "then"     [reduce using rule 58 (factor)]
    "else"     reduce using rule 38 (expr)
    "else"     [reduce using rule 58 (factor)]
    "while"    reduce using rule 38 (expr)
    "while"    [reduce using rule 58 (factor)]
    "do"       reduce using rule 38 (expr)
    "do"       [reduce using rule 58 (factor)]
    "read"     reduce using rule 38 (expr)
    "read"     [reduce using rule 58 (factor)]
    "write"    reduce using rule 38 (expr)
    "write"    [reduce using rule 58 (factor)]
    "skip"     reduce using rule 38 (expr)
    "skip"     [reduce using rule 58 (factor)]
    "<>"       reduce using rule 38 (expr)
    "<>"       [reduce using rule 58 (factor)]
    "<"        reduce using rule 38 (expr)
    "<"        [reduce using rule 58 (factor)]
    "<="       reduce using rule 38 (expr)
    "<="       [reduce using rule 58 (factor)]
    ">"        reduce using rule 38 (expr)
    ">"        [reduce using rule 58 (factor)]
    ">="       reduce using rule 38 (expr)
    ">="       [reduce using rule 58 (factor)]
    $default   reduce using rule 38 (expr)

    expr            go to state 53
    relOpCondition  go to state 74
    term            go to state 55
    factor          go to state 56
    posSign         go to state 57


State 86

   38 expr: expr . relOpCondition expr
   41 relOpCondition: expr relOp expr .
   50 expr: expr . "+" term
   51     | expr . "-" term
   58 factor: expr .

    identsym   shift, and go to state 46
    numbersym  shift, and go to state 47
    "+"        shift, and go to state 66
    "-"        shift, and go to state 67

    identsym   [reduce using rule 41 (relOpCondition)]
    identsym   [reduce using rule 58 (factor)]
    numbersym  [reduce using rule 41 (relOpCondition)]
    numbersym  [reduce using rule 58 (factor)]
    "+"        [reduce using rule 41 (relOpCondition)]
    "+"        [reduce using rule 58 (factor)]
    "-"        [reduce using rule 41 (relOpCondition)]
    "-"        [reduce using rule 58 (factor)]
    "*"        reduce using rule 58 (factor)
    "/"        reduce using rule 58 (factor)
    "then"     reduce using rule 41 (relOpCondition)
    "then"     [reduce using rule 58 (factor)]
    "do"       reduce using rule 41 (relOpCondition)
    "do"       [reduce using rule 58 (factor)]
    $default   reduce using rule 41 (relOpCondition)

    expr            go to state 53
    relOpCondition  go to state 74
    term            go to state 55
    factor          go to state 56
    posSign         go to state 57


State 87

   52 term: factor .
   53     | term "*" factor .

    $end       reduce using rule 52 (term)
    $end       [reduce using rule 53 (term)]
    identsym   reduce using rule 52 (term)
    identsym   [reduce using rule 53 (term)]
    numbersym  reduce using rule 52 (term)
    numbersym  [reduce using rule 53 (term)]
    "+"        reduce using rule 52 (term)
    "+"        [reduce using rule 53 (term)]
    "-"        reduce using rule 52 (term)
    "-"        [reduce using rule 53 (term)]
    "*"        reduce using rule 52 (term)
    "*"        [reduce using rule 53 (term)]
    "/"        reduce using rule 52 (term)
    "/"        [reduce using rule 53 (term)]
    "="        reduce using rule 52 (term)
    "="        [reduce using rule 53 (term)]
    "call"     reduce using rule 52 (term)
    "call"     [reduce using rule 53 (term)]
    "begin"    reduce using rule 52 (term)
    "begin"    [reduce using rule 53 (term)]
    "end"      reduce using rule 52 (term)
    "end"      [reduce using rule 53 (term)]
    "if"       reduce using rule 52 (term)
    "if"       [reduce using rule 53 (term)]
    "then"     reduce using rule 52 (term)
    "then"     [reduce using rule 53 (term)]
    "else"     reduce using rule 52 (term)
    "else"     [reduce using rule 53 (term)]
    "while"    reduce using rule 52 (term)
    "while"    [reduce using rule 53 (term)]
    "do"       reduce using rule 52 (term)
    "do"       [reduce using rule 53 (term)]
    "read"     reduce using rule 52 (term)
    "read"     [reduce using rule 53 (term)]
    "write"    reduce using rule 52 (term)
    "write"    [reduce using rule 53 (term)]
    "skip"     reduce using rule 52 (term)
    "skip"     [reduce using rule 53 (term)]
    "<>"       reduce using rule 52 (term)
    "<>"       [reduce using rule 53 (term)]
    "<"        reduce using rule 52 (term)
    "<"        [reduce using rule 53 (term)]
    "<="       reduce using rule 52 (term)
    "<="       [reduce using rule 53 (term)]
    ">"        reduce using rule 52 (term)
    ">"        [reduce using rule 53 (term)]
    ">="       reduce using rule 52 (term)
    ">="       [reduce using rule 53 (term)]
    $default   reduce using rule 52 (term)


State 88

   52 term: factor .
   54     | term "/" factor .

    $end       reduce using rule 52 (term)
    $end       [reduce using rule 54 (term)]
    identsym   reduce using rule 52 (term)
    identsym   [reduce using rule 54 (term)]
    numbersym  reduce using rule 52 (term)
    numbersym  [reduce using rule 54 (term)]
    "+"        reduce using rule 52 (term)
    "+"        [reduce using rule 54 (term)]
    "-"        reduce using rule 52 (term)
    "-"        [reduce using rule 54 (term)]
    "*"        reduce using rule 52 (term)
    "*"        [reduce using rule 54 (term)]
    "/"        reduce using rule 52 (term)
    "/"        [reduce using rule 54 (term)]
    "="        reduce using rule 52 (term)
    "="        [reduce using rule 54 (term)]
    "call"     reduce using rule 52 (term)
    "call"     [reduce using rule 54 (term)]
    "begin"    reduce using rule 52 (term)
    "begin"    [reduce using rule 54 (term)]
    "end"      reduce using rule 52 (term)
    "end"      [reduce using rule 54 (term)]
    "if"       reduce using rule 52 (term)
    "if"       [reduce using rule 54 (term)]
    "then"     reduce using rule 52 (term)
    "then"     [reduce using rule 54 (term)]
    "else"     reduce using rule 52 (term)
    "else"     [reduce using rule 54 (term)]
    "while"    reduce using rule 52 (term)
    "while"    [reduce using rule 54 (term)]
    "do"       reduce using rule 52 (term)
    "do"       [reduce using rule 54 (term)]
    "read"     reduce using rule 52 (term)
    "read"     [reduce using rule 54 (term)]
    "write"    reduce using rule 52 (term)
    "write"    [reduce using rule 54 (term)]
    "skip"     reduce using rule 52 (term)
    "skip"     [reduce using rule 54 (term)]
    "<>"       reduce using rule 52 (term)
    "<>"       [reduce using rule 54 (term)]
    "<"        reduce using rule 52 (term)
    "<"        [reduce using rule 54 (term)]
    "<="       reduce using rule 52 (term)
    "<="       [reduce using rule 54 (term)]
    ">"        reduce using rule 52 (term)
    ">"        [reduce using rule 54 (term)]
    ">="       reduce using rule 52 (term)
    ">="       [reduce using rule 54 (term)]
    $default   reduce using rule 52 (term)


State 89

   31 whileStmt: "while" condition "do" stmt . "end"

    "end"  shift, and go to state 91


State 90

   30 ifStmt: "if" condition "then" stmt "else" . stmt "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 26
    "if"      shift, and go to state 27
    "while"   shift, and go to state 28
    "read"    shift, and go to state 29
    "write"   shift, and go to state 30
    "skip"    shift, and go to state 31

    stmt        go to state 92
    assignStmt  go to state 33
    callStmt    go to state 34
    beginStmt   go to state 35
    ifStmt      go to state 36
    whileStmt   go to state 37
    readStmt    go to state 38
    writeStmt   go to state 39
    skipStmt    go to state 40


State 91

   31 whileStmt: "while" condition "do" stmt "end" .

    $default  reduce using rule 31 (whileStmt)


State 92

   30 ifStmt: "if" condition "then" stmt "else" stmt . "end"

    "end"  shift, and go to state 93


State 93

   30 ifStmt: "if" condition "then" stmt "else" stmt "end" .

    $default  reduce using rule 30 (ifStmt)
