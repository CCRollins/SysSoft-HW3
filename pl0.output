Nonterminals useless in grammar

    term
    factor
    posSign


Terminals unused in grammar

    "+"
    "-"
    "*"
    "/"
    "."
    ";"
    "("
    ")"


Rules useless in grammar

   47 posSign: "+"


State 57 conflicts: 1 shift/reduce
State 58 conflicts: 1 shift/reduce
State 72 conflicts: 2 shift/reduce
State 73 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: block

    2 block: constDecls varDecls procDecls stmt

    3 constDecls: empty
    4           | constDecl

    5 constDecl: "const" constDefs

    6 constDefs: constDef
    7          | constDefs "," constDef

    8 constDef: identsym "=" numbersym

    9 varDecls: empty
   10         | varDecl

   11 varDecl: "var" idents

   12 idents: identsym

   13 procDecls: empty
   14          | procDecl

   15 procDecl: "procedure" identsym block

   16 stmt: assignStmt
   17     | callStmt
   18     | beginStmt
   19     | ifStmt
   20     | whileStmt
   21     | readStmt
   22     | writeStmt
   23     | skipStmt

   24 assignStmt: identsym ":=" expr

   25 callStmt: "call" identsym

   26 beginStmt: "begin" stmts "end"

   27 ifStmt: "if" condition "then" stmt "else" stmt "end"

   28 whileStmt: "while" condition "do" stmt "end"

   29 readStmt: "read" identsym

   30 writeStmt: "write" expr

   31 skipStmt: "skip"

   32 stmts: stmt

   33 condition: oddCondition
   34          | relOpCondition

   35 oddCondition: "odd" expr

   36 expr: expr relOpCondition expr
   37     | identsym
   38     | numbersym

   39 relOpCondition: expr relOp expr

   40 relOp: "="
   41      | "<>"
   42      | "<"
   43      | "<="
   44      | ">"
   45      | ">="

   46 empty: ε


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 8 12 15 24 25 29 37
    numbersym <number> (259) 8 38
    "+" <token> (260)
    "-" <token> (261)
    "*" <token> (262)
    "/" <token> (263)
    "." <token> (264)
    ";" <token> (265)
    "=" <token> (266) 8 40
    "," <token> (267) 7
    ":=" <token> (268) 24
    "const" <token> (269) 5
    "var" <token> (270) 11
    "procedure" <token> (271) 15
    "call" <token> (272) 25
    "begin" <token> (273) 26
    "end" <token> (274) 26 27 28
    "if" <token> (275) 27
    "then" <token> (276) 27
    "else" <token> (277) 27
    "while" <token> (278) 28
    "do" <token> (279) 28
    "read" <token> (280) 29
    "write" <token> (281) 30
    "skip" <token> (282) 31
    "odd" <token> (283) 35
    "<>" <token> (284) 41
    "<" <token> (285) 42
    "<=" <token> (286) 43
    ">" <token> (287) 44
    ">=" <token> (288) 45
    "(" <token> (289)
    ")" <token> (290)


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program <block> (37)
        on left: 1
        on right: 0
    block <block> (38)
        on left: 2
        on right: 1 15
    constDecls <const_decls> (39)
        on left: 3 4
        on right: 2
    constDecl <const_decl> (40)
        on left: 5
        on right: 4
    constDefs <const_defs> (41)
        on left: 6 7
        on right: 5 7
    constDef <const_def> (42)
        on left: 8
        on right: 6 7
    varDecls <var_decls> (43)
        on left: 9 10
        on right: 2
    varDecl <var_decl> (44)
        on left: 11
        on right: 10
    idents <idents> (45)
        on left: 12
        on right: 11
    procDecls <proc_decls> (46)
        on left: 13 14
        on right: 2
    procDecl <proc_decl> (47)
        on left: 15
        on right: 14
    stmt <stmt> (48)
        on left: 16 17 18 19 20 21 22 23
        on right: 2 27 28 32
    assignStmt <assign_stmt_t> (49)
        on left: 24
        on right: 16
    callStmt <call_stmt_t> (50)
        on left: 25
        on right: 17
    beginStmt <begin_stmt_t> (51)
        on left: 26
        on right: 18
    ifStmt <if_stmt_t> (52)
        on left: 27
        on right: 19
    whileStmt <while_stmt_t> (53)
        on left: 28
        on right: 20
    readStmt <read_stmt_t> (54)
        on left: 29
        on right: 21
    writeStmt <write_stmt_t> (55)
        on left: 30
        on right: 22
    skipStmt <skip_stmt_t> (56)
        on left: 31
        on right: 23
    stmts <stmts> (57)
        on left: 32
        on right: 26
    condition <condition> (58)
        on left: 33 34
        on right: 27 28
    oddCondition <odd_condition> (59)
        on left: 35
        on right: 33
    expr <expr> (60)
        on left: 36 37 38
        on right: 24 30 35 36 39
    relOpCondition <rel_op_condition> (61)
        on left: 39
        on right: 34 36
    relOp <token> (62)
        on left: 40 41 42 43 44 45
        on right: 39
    empty <empty> (63)
        on left: 46
        on right: 3 9 13


State 0

    0 $accept: • program $end

    "const"  shift, and go to state 1

    $default  reduce using rule 46 (empty)

    program     go to state 2
    block       go to state 3
    constDecls  go to state 4
    constDecl   go to state 5
    empty       go to state 6


State 1

    5 constDecl: "const" • constDefs

    identsym  shift, and go to state 7

    constDefs  go to state 8
    constDef   go to state 9


State 2

    0 $accept: program • $end

    $end  shift, and go to state 10


State 3

    1 program: block •

    $default  reduce using rule 1 (program)


State 4

    2 block: constDecls • varDecls procDecls stmt

    "var"  shift, and go to state 11

    $default  reduce using rule 46 (empty)

    varDecls  go to state 12
    varDecl   go to state 13
    empty     go to state 14


State 5

    4 constDecls: constDecl •

    $default  reduce using rule 4 (constDecls)


State 6

    3 constDecls: empty •

    $default  reduce using rule 3 (constDecls)


State 7

    8 constDef: identsym • "=" numbersym

    "="  shift, and go to state 15


State 8

    5 constDecl: "const" constDefs •
    7 constDefs: constDefs • "," constDef

    ","  shift, and go to state 16

    $default  reduce using rule 5 (constDecl)


State 9

    6 constDefs: constDef •

    $default  reduce using rule 6 (constDefs)


State 10

    0 $accept: program $end •

    $default  accept


State 11

   11 varDecl: "var" • idents

    identsym  shift, and go to state 17

    idents  go to state 18


State 12

    2 block: constDecls varDecls • procDecls stmt

    "procedure"  shift, and go to state 19

    $default  reduce using rule 46 (empty)

    procDecls  go to state 20
    procDecl   go to state 21
    empty      go to state 22


State 13

   10 varDecls: varDecl •

    $default  reduce using rule 10 (varDecls)


State 14

    9 varDecls: empty •

    $default  reduce using rule 9 (varDecls)


State 15

    8 constDef: identsym "=" • numbersym

    numbersym  shift, and go to state 23


State 16

    7 constDefs: constDefs "," • constDef

    identsym  shift, and go to state 7

    constDef  go to state 24


State 17

   12 idents: identsym •

    $default  reduce using rule 12 (idents)


State 18

   11 varDecl: "var" idents •

    $default  reduce using rule 11 (varDecl)


State 19

   15 procDecl: "procedure" • identsym block

    identsym  shift, and go to state 25


State 20

    2 block: constDecls varDecls procDecls • stmt

    identsym  shift, and go to state 26
    "call"    shift, and go to state 27
    "begin"   shift, and go to state 28
    "if"      shift, and go to state 29
    "while"   shift, and go to state 30
    "read"    shift, and go to state 31
    "write"   shift, and go to state 32
    "skip"    shift, and go to state 33

    stmt        go to state 34
    assignStmt  go to state 35
    callStmt    go to state 36
    beginStmt   go to state 37
    ifStmt      go to state 38
    whileStmt   go to state 39
    readStmt    go to state 40
    writeStmt   go to state 41
    skipStmt    go to state 42


State 21

   14 procDecls: procDecl •

    $default  reduce using rule 14 (procDecls)


State 22

   13 procDecls: empty •

    $default  reduce using rule 13 (procDecls)


State 23

    8 constDef: identsym "=" numbersym •

    $default  reduce using rule 8 (constDef)


State 24

    7 constDefs: constDefs "," constDef •

    $default  reduce using rule 7 (constDefs)


State 25

   15 procDecl: "procedure" identsym • block

    "const"  shift, and go to state 1

    $default  reduce using rule 46 (empty)

    block       go to state 43
    constDecls  go to state 4
    constDecl   go to state 5
    empty       go to state 6


State 26

   24 assignStmt: identsym • ":=" expr

    ":="  shift, and go to state 44


State 27

   25 callStmt: "call" • identsym

    identsym  shift, and go to state 45


State 28

   26 beginStmt: "begin" • stmts "end"

    identsym  shift, and go to state 26
    "call"    shift, and go to state 27
    "begin"   shift, and go to state 28
    "if"      shift, and go to state 29
    "while"   shift, and go to state 30
    "read"    shift, and go to state 31
    "write"   shift, and go to state 32
    "skip"    shift, and go to state 33

    stmt        go to state 46
    assignStmt  go to state 35
    callStmt    go to state 36
    beginStmt   go to state 37
    ifStmt      go to state 38
    whileStmt   go to state 39
    readStmt    go to state 40
    writeStmt   go to state 41
    skipStmt    go to state 42
    stmts       go to state 47


State 29

   27 ifStmt: "if" • condition "then" stmt "else" stmt "end"

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "odd"      shift, and go to state 50

    condition       go to state 51
    oddCondition    go to state 52
    expr            go to state 53
    relOpCondition  go to state 54


State 30

   28 whileStmt: "while" • condition "do" stmt "end"

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "odd"      shift, and go to state 50

    condition       go to state 55
    oddCondition    go to state 52
    expr            go to state 53
    relOpCondition  go to state 54


State 31

   29 readStmt: "read" • identsym

    identsym  shift, and go to state 56


State 32

   30 writeStmt: "write" • expr

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49

    expr  go to state 57


State 33

   31 skipStmt: "skip" •

    $default  reduce using rule 31 (skipStmt)


State 34

    2 block: constDecls varDecls procDecls stmt •

    $default  reduce using rule 2 (block)


State 35

   16 stmt: assignStmt •

    $default  reduce using rule 16 (stmt)


State 36

   17 stmt: callStmt •

    $default  reduce using rule 17 (stmt)


State 37

   18 stmt: beginStmt •

    $default  reduce using rule 18 (stmt)


State 38

   19 stmt: ifStmt •

    $default  reduce using rule 19 (stmt)


State 39

   20 stmt: whileStmt •

    $default  reduce using rule 20 (stmt)


State 40

   21 stmt: readStmt •

    $default  reduce using rule 21 (stmt)


State 41

   22 stmt: writeStmt •

    $default  reduce using rule 22 (stmt)


State 42

   23 stmt: skipStmt •

    $default  reduce using rule 23 (stmt)


State 43

   15 procDecl: "procedure" identsym block •

    $default  reduce using rule 15 (procDecl)


State 44

   24 assignStmt: identsym ":=" • expr

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49

    expr  go to state 58


State 45

   25 callStmt: "call" identsym •

    $default  reduce using rule 25 (callStmt)


State 46

   32 stmts: stmt •

    $default  reduce using rule 32 (stmts)


State 47

   26 beginStmt: "begin" stmts • "end"

    "end"  shift, and go to state 59


State 48

   37 expr: identsym •

    $default  reduce using rule 37 (expr)


State 49

   38 expr: numbersym •

    $default  reduce using rule 38 (expr)


State 50

   35 oddCondition: "odd" • expr

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49

    expr  go to state 60


State 51

   27 ifStmt: "if" condition • "then" stmt "else" stmt "end"

    "then"  shift, and go to state 61


State 52

   33 condition: oddCondition •

    $default  reduce using rule 33 (condition)


State 53

   36 expr: expr • relOpCondition expr
   39 relOpCondition: expr • relOp expr

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "="        shift, and go to state 62
    "<>"       shift, and go to state 63
    "<"        shift, and go to state 64
    "<="       shift, and go to state 65
    ">"        shift, and go to state 66
    ">="       shift, and go to state 67

    expr            go to state 53
    relOpCondition  go to state 68
    relOp           go to state 69


State 54

   34 condition: relOpCondition •

    $default  reduce using rule 34 (condition)


State 55

   28 whileStmt: "while" condition • "do" stmt "end"

    "do"  shift, and go to state 70


State 56

   29 readStmt: "read" identsym •

    $default  reduce using rule 29 (readStmt)


State 57

   30 writeStmt: "write" expr •
   36 expr: expr • relOpCondition expr

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49

    identsym  [reduce using rule 30 (writeStmt)]
    $default  reduce using rule 30 (writeStmt)

    expr            go to state 53
    relOpCondition  go to state 68


State 58

   24 assignStmt: identsym ":=" expr •
   36 expr: expr • relOpCondition expr

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49

    identsym  [reduce using rule 24 (assignStmt)]
    $default  reduce using rule 24 (assignStmt)

    expr            go to state 53
    relOpCondition  go to state 68


State 59

   26 beginStmt: "begin" stmts "end" •

    $default  reduce using rule 26 (beginStmt)


State 60

   35 oddCondition: "odd" expr •
   36 expr: expr • relOpCondition expr

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49

    $default  reduce using rule 35 (oddCondition)

    expr            go to state 53
    relOpCondition  go to state 68


State 61

   27 ifStmt: "if" condition "then" • stmt "else" stmt "end"

    identsym  shift, and go to state 26
    "call"    shift, and go to state 27
    "begin"   shift, and go to state 28
    "if"      shift, and go to state 29
    "while"   shift, and go to state 30
    "read"    shift, and go to state 31
    "write"   shift, and go to state 32
    "skip"    shift, and go to state 33

    stmt        go to state 71
    assignStmt  go to state 35
    callStmt    go to state 36
    beginStmt   go to state 37
    ifStmt      go to state 38
    whileStmt   go to state 39
    readStmt    go to state 40
    writeStmt   go to state 41
    skipStmt    go to state 42


State 62

   40 relOp: "=" •

    $default  reduce using rule 40 (relOp)


State 63

   41 relOp: "<>" •

    $default  reduce using rule 41 (relOp)


State 64

   42 relOp: "<" •

    $default  reduce using rule 42 (relOp)


State 65

   43 relOp: "<=" •

    $default  reduce using rule 43 (relOp)


State 66

   44 relOp: ">" •

    $default  reduce using rule 44 (relOp)


State 67

   45 relOp: ">=" •

    $default  reduce using rule 45 (relOp)


State 68

   36 expr: expr relOpCondition • expr

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49

    expr  go to state 72


State 69

   39 relOpCondition: expr relOp • expr

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49

    expr  go to state 73


State 70

   28 whileStmt: "while" condition "do" • stmt "end"

    identsym  shift, and go to state 26
    "call"    shift, and go to state 27
    "begin"   shift, and go to state 28
    "if"      shift, and go to state 29
    "while"   shift, and go to state 30
    "read"    shift, and go to state 31
    "write"   shift, and go to state 32
    "skip"    shift, and go to state 33

    stmt        go to state 74
    assignStmt  go to state 35
    callStmt    go to state 36
    beginStmt   go to state 37
    ifStmt      go to state 38
    whileStmt   go to state 39
    readStmt    go to state 40
    writeStmt   go to state 41
    skipStmt    go to state 42


State 71

   27 ifStmt: "if" condition "then" stmt • "else" stmt "end"

    "else"  shift, and go to state 75


State 72

   36 expr: expr • relOpCondition expr
   36     | expr relOpCondition expr •

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49

    identsym   [reduce using rule 36 (expr)]
    numbersym  [reduce using rule 36 (expr)]
    $default   reduce using rule 36 (expr)

    expr            go to state 53
    relOpCondition  go to state 68


State 73

   36 expr: expr • relOpCondition expr
   39 relOpCondition: expr relOp expr •

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49

    identsym   [reduce using rule 39 (relOpCondition)]
    numbersym  [reduce using rule 39 (relOpCondition)]
    $default   reduce using rule 39 (relOpCondition)

    expr            go to state 53
    relOpCondition  go to state 68


State 74

   28 whileStmt: "while" condition "do" stmt • "end"

    "end"  shift, and go to state 76


State 75

   27 ifStmt: "if" condition "then" stmt "else" • stmt "end"

    identsym  shift, and go to state 26
    "call"    shift, and go to state 27
    "begin"   shift, and go to state 28
    "if"      shift, and go to state 29
    "while"   shift, and go to state 30
    "read"    shift, and go to state 31
    "write"   shift, and go to state 32
    "skip"    shift, and go to state 33

    stmt        go to state 77
    assignStmt  go to state 35
    callStmt    go to state 36
    beginStmt   go to state 37
    ifStmt      go to state 38
    whileStmt   go to state 39
    readStmt    go to state 40
    writeStmt   go to state 41
    skipStmt    go to state 42


State 76

   28 whileStmt: "while" condition "do" stmt "end" •

    $default  reduce using rule 28 (whileStmt)


State 77

   27 ifStmt: "if" condition "then" stmt "else" stmt • "end"

    "end"  shift, and go to state 78


State 78

   27 ifStmt: "if" condition "then" stmt "else" stmt "end" •

    $default  reduce using rule 27 (ifStmt)
