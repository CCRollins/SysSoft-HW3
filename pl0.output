Nonterminals useless in grammar

    posSign


Terminals unused in grammar

    "+"
    "-"
    "."
    "end"


Rules useless in grammar

   54 posSign: "+"
   55        | empty


State 47 conflicts: 8 shift/reduce
State 56 conflicts: 6 shift/reduce


Grammar

    0 $accept: program $end

    1 program: block

    2 block: constDecls varDecls procDecls stmt

    3 constDecls: empty
    4           | constDecls constDecl

    5 constDef: "const" identsym ":=" numbersym

    6 constDecl: "const" constDefs

    7 constDefs: constDef
    8          | constDefs "," constDef

    9 varDecls: empty
   10         | varDecls varDecl

   11 varDecl: "var" idents

   12 idents: identsym
   13       | idents "," identsym

   14 procDecls: empty
   15          | procDecls procDecl

   16 procDecl: "procedure" identsym ";" block ";"

   17 stmt: assignStmt
   18     | callStmt
   19     | beginStmt
   20     | ifStmt
   21     | whileStmt
   22     | readStmt
   23     | writeStmt
   24     | skipStmt

   25 assignStmt: identsym "=" expr ";"

   26 callStmt: "call" identsym

   27 beginStmt: "begin" stmts

   28 ifStmt: "if" condition "then" stmt "else" stmt

   29 whileStmt: "while" condition "do" stmt

   30 readStmt: "read" identsym ";"

   31 writeStmt: "write" expr ";"

   32 skipStmt: "skip"

   33 stmts: stmt
   34      | stmts stmt

   35 condition: oddCondition
   36          | relOpCondition

   37 oddCondition: "odd" expr

   38 relOpCondition: expr relOp expr

   39 relOp: "="
   40      | "<>"
   41      | "<"
   42      | "<="
   43      | ">"
   44      | ">="

   45 expr: term
   46     | term relOp term

   47 term: factor
   48     | term "*" factor
   49     | term "/" factor

   50 factor: identsym
   51       | numbersym
   52       | "(" expr ")"

   53 empty: ε


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 5 12 13 16 25 26 30 50
    numbersym <number> (259) 5 51
    "+" <token> (260)
    "-" <token> (261)
    "*" <token> (262) 48
    "/" <token> (263) 49
    "." <token> (264)
    ";" <token> (265) 16 25 30 31
    "=" <token> (266) 25 39
    "," <token> (267) 8 13
    ":=" <token> (268) 5
    "const" <token> (269) 5 6
    "var" <token> (270) 11
    "procedure" <token> (271) 16
    "call" <token> (272) 26
    "begin" <token> (273) 27
    "end" <token> (274)
    "if" <token> (275) 28
    "then" <token> (276) 28
    "else" <token> (277) 28
    "while" <token> (278) 29
    "do" <token> (279) 29
    "read" <token> (280) 30
    "write" <token> (281) 31
    "skip" <token> (282) 32
    "odd" <token> (283) 37
    "<>" <token> (284) 40
    "<" <token> (285) 41
    "<=" <token> (286) 42
    ">" <token> (287) 43
    ">=" <token> (288) 44
    "(" <token> (289) 52
    ")" <token> (290) 52


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program <block> (37)
        on left: 1
        on right: 0
    block <block> (38)
        on left: 2
        on right: 1 16
    constDecls <const_decls> (39)
        on left: 3 4
        on right: 2 4
    constDef <const_def> (40)
        on left: 5
        on right: 7 8
    constDecl <const_decl> (41)
        on left: 6
        on right: 4
    constDefs <const_defs> (42)
        on left: 7 8
        on right: 6 8
    varDecls <var_decls> (43)
        on left: 9 10
        on right: 2 10
    varDecl <var_decl> (44)
        on left: 11
        on right: 10
    idents <idents> (45)
        on left: 12 13
        on right: 11 13
    procDecls <proc_decls> (46)
        on left: 14 15
        on right: 2 15
    procDecl <proc_decl> (47)
        on left: 16
        on right: 15
    stmt <stmt> (48)
        on left: 17 18 19 20 21 22 23 24
        on right: 2 28 29 33 34
    assignStmt <assign_stmt> (49)
        on left: 25
        on right: 17
    callStmt <call_stmt> (50)
        on left: 26
        on right: 18
    beginStmt <begin_stmt> (51)
        on left: 27
        on right: 19
    ifStmt <if_stmt> (52)
        on left: 28
        on right: 20
    whileStmt <while_stmt> (53)
        on left: 29
        on right: 21
    readStmt <read_stmt> (54)
        on left: 30
        on right: 22
    writeStmt <write_stmt> (55)
        on left: 31
        on right: 23
    skipStmt <skip_stmt> (56)
        on left: 32
        on right: 24
    stmts <stmts> (57)
        on left: 33 34
        on right: 27 34
    condition <condition> (58)
        on left: 35 36
        on right: 28 29
    oddCondition <odd_condition> (59)
        on left: 37
        on right: 35
    relOpCondition <rel_op_condition> (60)
        on left: 38
        on right: 36
    relOp <token> (61)
        on left: 39 40 41 42 43 44
        on right: 38 46
    expr <expr> (62)
        on left: 45 46
        on right: 25 31 37 38 52
    term <expr> (63)
        on left: 47 48 49
        on right: 45 46 48 49
    factor <expr> (64)
        on left: 50 51 52
        on right: 47 48 49
    empty <empty> (65)
        on left: 53
        on right: 3 9 14


State 0

    0 $accept: • program $end

    $default  reduce using rule 53 (empty)

    program     go to state 1
    block       go to state 2
    constDecls  go to state 3
    empty       go to state 4


State 1

    0 $accept: program • $end

    $end  shift, and go to state 5


State 2

    1 program: block •

    $default  reduce using rule 1 (program)


State 3

    2 block: constDecls • varDecls procDecls stmt
    4 constDecls: constDecls • constDecl

    "const"  shift, and go to state 6

    $default  reduce using rule 53 (empty)

    constDecl  go to state 7
    varDecls   go to state 8
    empty      go to state 9


State 4

    3 constDecls: empty •

    $default  reduce using rule 3 (constDecls)


State 5

    0 $accept: program $end •

    $default  accept


State 6

    6 constDecl: "const" • constDefs

    "const"  shift, and go to state 10

    constDef   go to state 11
    constDefs  go to state 12


State 7

    4 constDecls: constDecls constDecl •

    $default  reduce using rule 4 (constDecls)


State 8

    2 block: constDecls varDecls • procDecls stmt
   10 varDecls: varDecls • varDecl

    "var"  shift, and go to state 13

    $default  reduce using rule 53 (empty)

    varDecl    go to state 14
    procDecls  go to state 15
    empty      go to state 16


State 9

    9 varDecls: empty •

    $default  reduce using rule 9 (varDecls)


State 10

    5 constDef: "const" • identsym ":=" numbersym

    identsym  shift, and go to state 17


State 11

    7 constDefs: constDef •

    $default  reduce using rule 7 (constDefs)


State 12

    6 constDecl: "const" constDefs •
    8 constDefs: constDefs • "," constDef

    ","  shift, and go to state 18

    $default  reduce using rule 6 (constDecl)


State 13

   11 varDecl: "var" • idents

    identsym  shift, and go to state 19

    idents  go to state 20


State 14

   10 varDecls: varDecls varDecl •

    $default  reduce using rule 10 (varDecls)


State 15

    2 block: constDecls varDecls procDecls • stmt
   15 procDecls: procDecls • procDecl

    identsym     shift, and go to state 21
    "procedure"  shift, and go to state 22
    "call"       shift, and go to state 23
    "begin"      shift, and go to state 24
    "if"         shift, and go to state 25
    "while"      shift, and go to state 26
    "read"       shift, and go to state 27
    "write"      shift, and go to state 28
    "skip"       shift, and go to state 29

    procDecl    go to state 30
    stmt        go to state 31
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 16

   14 procDecls: empty •

    $default  reduce using rule 14 (procDecls)


State 17

    5 constDef: "const" identsym • ":=" numbersym

    ":="  shift, and go to state 40


State 18

    8 constDefs: constDefs "," • constDef

    "const"  shift, and go to state 10

    constDef  go to state 41


State 19

   12 idents: identsym •

    $default  reduce using rule 12 (idents)


State 20

   11 varDecl: "var" idents •
   13 idents: idents • "," identsym

    ","  shift, and go to state 42

    $default  reduce using rule 11 (varDecl)


State 21

   25 assignStmt: identsym • "=" expr ";"

    "="  shift, and go to state 43


State 22

   16 procDecl: "procedure" • identsym ";" block ";"

    identsym  shift, and go to state 44


State 23

   26 callStmt: "call" • identsym

    identsym  shift, and go to state 45


State 24

   27 beginStmt: "begin" • stmts

    identsym  shift, and go to state 21
    "call"    shift, and go to state 23
    "begin"   shift, and go to state 24
    "if"      shift, and go to state 25
    "while"   shift, and go to state 26
    "read"    shift, and go to state 27
    "write"   shift, and go to state 28
    "skip"    shift, and go to state 29

    stmt        go to state 46
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39
    stmts       go to state 47


State 25

   28 ifStmt: "if" • condition "then" stmt "else" stmt

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "odd"      shift, and go to state 50
    "("        shift, and go to state 51

    condition       go to state 52
    oddCondition    go to state 53
    relOpCondition  go to state 54
    expr            go to state 55
    term            go to state 56
    factor          go to state 57


State 26

   29 whileStmt: "while" • condition "do" stmt

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "odd"      shift, and go to state 50
    "("        shift, and go to state 51

    condition       go to state 58
    oddCondition    go to state 53
    relOpCondition  go to state 54
    expr            go to state 55
    term            go to state 56
    factor          go to state 57


State 27

   30 readStmt: "read" • identsym ";"

    identsym  shift, and go to state 59


State 28

   31 writeStmt: "write" • expr ";"

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "("        shift, and go to state 51

    expr    go to state 60
    term    go to state 56
    factor  go to state 57


State 29

   32 skipStmt: "skip" •

    $default  reduce using rule 32 (skipStmt)


State 30

   15 procDecls: procDecls procDecl •

    $default  reduce using rule 15 (procDecls)


State 31

    2 block: constDecls varDecls procDecls stmt •

    $default  reduce using rule 2 (block)


State 32

   17 stmt: assignStmt •

    $default  reduce using rule 17 (stmt)


State 33

   18 stmt: callStmt •

    $default  reduce using rule 18 (stmt)


State 34

   19 stmt: beginStmt •

    $default  reduce using rule 19 (stmt)


State 35

   20 stmt: ifStmt •

    $default  reduce using rule 20 (stmt)


State 36

   21 stmt: whileStmt •

    $default  reduce using rule 21 (stmt)


State 37

   22 stmt: readStmt •

    $default  reduce using rule 22 (stmt)


State 38

   23 stmt: writeStmt •

    $default  reduce using rule 23 (stmt)


State 39

   24 stmt: skipStmt •

    $default  reduce using rule 24 (stmt)


State 40

    5 constDef: "const" identsym ":=" • numbersym

    numbersym  shift, and go to state 61


State 41

    8 constDefs: constDefs "," constDef •

    $default  reduce using rule 8 (constDefs)


State 42

   13 idents: idents "," • identsym

    identsym  shift, and go to state 62


State 43

   25 assignStmt: identsym "=" • expr ";"

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "("        shift, and go to state 51

    expr    go to state 63
    term    go to state 56
    factor  go to state 57


State 44

   16 procDecl: "procedure" identsym • ";" block ";"

    ";"  shift, and go to state 64


State 45

   26 callStmt: "call" identsym •

    $default  reduce using rule 26 (callStmt)


State 46

   33 stmts: stmt •

    $default  reduce using rule 33 (stmts)


State 47

   27 beginStmt: "begin" stmts •
   34 stmts: stmts • stmt

    identsym  shift, and go to state 21
    "call"    shift, and go to state 23
    "begin"   shift, and go to state 24
    "if"      shift, and go to state 25
    "while"   shift, and go to state 26
    "read"    shift, and go to state 27
    "write"   shift, and go to state 28
    "skip"    shift, and go to state 29

    identsym  [reduce using rule 27 (beginStmt)]
    "call"    [reduce using rule 27 (beginStmt)]
    "begin"   [reduce using rule 27 (beginStmt)]
    "if"      [reduce using rule 27 (beginStmt)]
    "while"   [reduce using rule 27 (beginStmt)]
    "read"    [reduce using rule 27 (beginStmt)]
    "write"   [reduce using rule 27 (beginStmt)]
    "skip"    [reduce using rule 27 (beginStmt)]
    $default  reduce using rule 27 (beginStmt)

    stmt        go to state 65
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 48

   50 factor: identsym •

    $default  reduce using rule 50 (factor)


State 49

   51 factor: numbersym •

    $default  reduce using rule 51 (factor)


State 50

   37 oddCondition: "odd" • expr

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "("        shift, and go to state 51

    expr    go to state 66
    term    go to state 56
    factor  go to state 57


State 51

   52 factor: "(" • expr ")"

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "("        shift, and go to state 51

    expr    go to state 67
    term    go to state 56
    factor  go to state 57


State 52

   28 ifStmt: "if" condition • "then" stmt "else" stmt

    "then"  shift, and go to state 68


State 53

   35 condition: oddCondition •

    $default  reduce using rule 35 (condition)


State 54

   36 condition: relOpCondition •

    $default  reduce using rule 36 (condition)


State 55

   38 relOpCondition: expr • relOp expr

    "="   shift, and go to state 69
    "<>"  shift, and go to state 70
    "<"   shift, and go to state 71
    "<="  shift, and go to state 72
    ">"   shift, and go to state 73
    ">="  shift, and go to state 74

    relOp  go to state 75


State 56

   45 expr: term •
   46     | term • relOp term
   48 term: term • "*" factor
   49     | term • "/" factor

    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "="   shift, and go to state 69
    "<>"  shift, and go to state 70
    "<"   shift, and go to state 71
    "<="  shift, and go to state 72
    ">"   shift, and go to state 73
    ">="  shift, and go to state 74

    "="       [reduce using rule 45 (expr)]
    "<>"      [reduce using rule 45 (expr)]
    "<"       [reduce using rule 45 (expr)]
    "<="      [reduce using rule 45 (expr)]
    ">"       [reduce using rule 45 (expr)]
    ">="      [reduce using rule 45 (expr)]
    $default  reduce using rule 45 (expr)

    relOp  go to state 78


State 57

   47 term: factor •

    $default  reduce using rule 47 (term)


State 58

   29 whileStmt: "while" condition • "do" stmt

    "do"  shift, and go to state 79


State 59

   30 readStmt: "read" identsym • ";"

    ";"  shift, and go to state 80


State 60

   31 writeStmt: "write" expr • ";"

    ";"  shift, and go to state 81


State 61

    5 constDef: "const" identsym ":=" numbersym •

    $default  reduce using rule 5 (constDef)


State 62

   13 idents: idents "," identsym •

    $default  reduce using rule 13 (idents)


State 63

   25 assignStmt: identsym "=" expr • ";"

    ";"  shift, and go to state 82


State 64

   16 procDecl: "procedure" identsym ";" • block ";"

    $default  reduce using rule 53 (empty)

    block       go to state 83
    constDecls  go to state 3
    empty       go to state 4


State 65

   34 stmts: stmts stmt •

    $default  reduce using rule 34 (stmts)


State 66

   37 oddCondition: "odd" expr •

    $default  reduce using rule 37 (oddCondition)


State 67

   52 factor: "(" expr • ")"

    ")"  shift, and go to state 84


State 68

   28 ifStmt: "if" condition "then" • stmt "else" stmt

    identsym  shift, and go to state 21
    "call"    shift, and go to state 23
    "begin"   shift, and go to state 24
    "if"      shift, and go to state 25
    "while"   shift, and go to state 26
    "read"    shift, and go to state 27
    "write"   shift, and go to state 28
    "skip"    shift, and go to state 29

    stmt        go to state 85
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 69

   39 relOp: "=" •

    $default  reduce using rule 39 (relOp)


State 70

   40 relOp: "<>" •

    $default  reduce using rule 40 (relOp)


State 71

   41 relOp: "<" •

    $default  reduce using rule 41 (relOp)


State 72

   42 relOp: "<=" •

    $default  reduce using rule 42 (relOp)


State 73

   43 relOp: ">" •

    $default  reduce using rule 43 (relOp)


State 74

   44 relOp: ">=" •

    $default  reduce using rule 44 (relOp)


State 75

   38 relOpCondition: expr relOp • expr

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "("        shift, and go to state 51

    expr    go to state 86
    term    go to state 56
    factor  go to state 57


State 76

   48 term: term "*" • factor

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "("        shift, and go to state 51

    factor  go to state 87


State 77

   49 term: term "/" • factor

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "("        shift, and go to state 51

    factor  go to state 88


State 78

   46 expr: term relOp • term

    identsym   shift, and go to state 48
    numbersym  shift, and go to state 49
    "("        shift, and go to state 51

    term    go to state 89
    factor  go to state 57


State 79

   29 whileStmt: "while" condition "do" • stmt

    identsym  shift, and go to state 21
    "call"    shift, and go to state 23
    "begin"   shift, and go to state 24
    "if"      shift, and go to state 25
    "while"   shift, and go to state 26
    "read"    shift, and go to state 27
    "write"   shift, and go to state 28
    "skip"    shift, and go to state 29

    stmt        go to state 90
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 80

   30 readStmt: "read" identsym ";" •

    $default  reduce using rule 30 (readStmt)


State 81

   31 writeStmt: "write" expr ";" •

    $default  reduce using rule 31 (writeStmt)


State 82

   25 assignStmt: identsym "=" expr ";" •

    $default  reduce using rule 25 (assignStmt)


State 83

   16 procDecl: "procedure" identsym ";" block • ";"

    ";"  shift, and go to state 91


State 84

   52 factor: "(" expr ")" •

    $default  reduce using rule 52 (factor)


State 85

   28 ifStmt: "if" condition "then" stmt • "else" stmt

    "else"  shift, and go to state 92


State 86

   38 relOpCondition: expr relOp expr •

    $default  reduce using rule 38 (relOpCondition)


State 87

   48 term: term "*" factor •

    $default  reduce using rule 48 (term)


State 88

   49 term: term "/" factor •

    $default  reduce using rule 49 (term)


State 89

   46 expr: term relOp term •
   48 term: term • "*" factor
   49     | term • "/" factor

    "*"  shift, and go to state 76
    "/"  shift, and go to state 77

    $default  reduce using rule 46 (expr)


State 90

   29 whileStmt: "while" condition "do" stmt •

    $default  reduce using rule 29 (whileStmt)


State 91

   16 procDecl: "procedure" identsym ";" block ";" •

    $default  reduce using rule 16 (procDecl)


State 92

   28 ifStmt: "if" condition "then" stmt "else" • stmt

    identsym  shift, and go to state 21
    "call"    shift, and go to state 23
    "begin"   shift, and go to state 24
    "if"      shift, and go to state 25
    "while"   shift, and go to state 26
    "read"    shift, and go to state 27
    "write"   shift, and go to state 28
    "skip"    shift, and go to state 29

    stmt        go to state 93
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 93

   28 ifStmt: "if" condition "then" stmt "else" stmt •

    $default  reduce using rule 28 (ifStmt)
