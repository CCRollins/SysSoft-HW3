Nonterminals useless in grammar

    posSign
    empty
    constDecl
    procDecl
    relOpCondition


Terminals unused in grammar

    "."


Rules useless in grammar

   52 posSign: "+"
   53        | "-"


State 14 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: block

    2 block: "const" constDecls "var" varDecls procDecls stmt

    3 constDecls: %empty
    4           | "const" constDefs

    5 constDefs: constDef
    6          | constDefs "," constDef

    7 constDef: identsym "=" numbersym

    8 varDecls: %empty
    9         | "var" varDecl

   10 varDecl: idents

   11 idents: identsym
   12       | idents "," identsym

   13 procDecls: %empty
   14          | "procedure" identsym block
   15          | procDecls "procedure" identsym block

   16 stmt: assignStmt
   17     | callStmt
   18     | beginStmt
   19     | ifStmt
   20     | whileStmt
   21     | readStmt
   22     | writeStmt
   23     | skipStmt

   24 assignStmt: identsym ":=" expr

   25 callStmt: "call" identsym

   26 beginStmt: "begin" stmts "end"

   27 stmts: stmt
   28      | stmts ";" stmt

   29 ifStmt: "if" condition "then" stmt "else" stmt "end"

   30 whileStmt: "while" condition "do" stmt "end"

   31 readStmt: "read" identsym

   32 writeStmt: "write" expr

   33 skipStmt: "skip"

   34 condition: oddCondition
   35          | expr relOp expr

   36 oddCondition: "odd" expr

   37 relOp: "="
   38      | "<>"
   39      | "<"
   40      | "<="
   41      | ">"
   42      | ">="

   43 expr: expr "+" term
   44     | expr "-" term
   45     | term

   46 term: term "*" factor
   47     | term "/" factor
   48     | factor

   49 factor: numbersym
   50       | identsym
   51       | "(" expr ")"


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 7 11 12 14 15 24 25 31 50
    numbersym <number> (259) 7 49
    "+" <token> (260) 43
    "-" <token> (261) 44
    "*" <token> (262) 46
    "/" <token> (263) 47
    "." <token> (264)
    ";" <token> (265) 28
    "=" <token> (266) 7 37
    "," <token> (267) 6 12
    ":=" <token> (268) 24
    "const" <token> (269) 2 4
    "var" <token> (270) 2 9
    "procedure" <token> (271) 14 15
    "call" <token> (272) 25
    "begin" <token> (273) 26
    "end" <token> (274) 26 29 30
    "if" <token> (275) 29
    "then" <token> (276) 29
    "else" <token> (277) 29
    "while" <token> (278) 30
    "do" <token> (279) 30
    "read" <token> (280) 31
    "write" <token> (281) 32
    "skip" <token> (282) 33
    "odd" <token> (283) 36
    "<>" <token> (284) 38
    "<" <token> (285) 39
    "<=" <token> (286) 40
    ">" <token> (287) 41
    ">=" <token> (288) 42
    "(" <token> (289) 51
    ")" <token> (290) 51


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program <block> (37)
        on left: 1
        on right: 0
    block <block> (38)
        on left: 2
        on right: 1 14 15
    constDecls <const_decls> (39)
        on left: 3 4
        on right: 2
    constDefs <const_defs> (40)
        on left: 5 6
        on right: 4 6
    constDef <const_def> (41)
        on left: 7
        on right: 5 6
    varDecls <var_decls> (42)
        on left: 8 9
        on right: 2
    varDecl <var_decl> (43)
        on left: 10
        on right: 9
    idents <idents> (44)
        on left: 11 12
        on right: 10 12
    procDecls <proc_decls> (45)
        on left: 13 14 15
        on right: 2 15
    stmt <stmt> (46)
        on left: 16 17 18 19 20 21 22 23
        on right: 2 27 28 29 30
    assignStmt <assign_stmt> (47)
        on left: 24
        on right: 16
    callStmt <call_stmt> (48)
        on left: 25
        on right: 17
    beginStmt <begin_stmt> (49)
        on left: 26
        on right: 18
    stmts <stmts> (50)
        on left: 27 28
        on right: 26 28
    ifStmt <if_stmt> (51)
        on left: 29
        on right: 19
    whileStmt <while_stmt> (52)
        on left: 30
        on right: 20
    readStmt <read_stmt> (53)
        on left: 31
        on right: 21
    writeStmt <write_stmt> (54)
        on left: 32
        on right: 22
    skipStmt <skip_stmt> (55)
        on left: 33
        on right: 23
    condition <condition> (56)
        on left: 34 35
        on right: 29 30
    oddCondition <odd_condition> (57)
        on left: 36
        on right: 34
    relOp <token> (58)
        on left: 37 38 39 40 41 42
        on right: 35
    expr <expr> (59)
        on left: 43 44 45
        on right: 24 32 35 36 43 44 51
    term <expr> (60)
        on left: 46 47 48
        on right: 43 44 45 46 47
    factor <expr> (61)
        on left: 49 50 51
        on right: 46 47 48


State 0

    0 $accept: . program $end

    "const"  shift, and go to state 1

    program  go to state 2
    block    go to state 3


State 1

    2 block: "const" . constDecls "var" varDecls procDecls stmt

    "const"  shift, and go to state 4

    $default  reduce using rule 3 (constDecls)

    constDecls  go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: block .

    $default  reduce using rule 1 (program)


State 4

    4 constDecls: "const" . constDefs

    identsym  shift, and go to state 7

    constDefs  go to state 8
    constDef   go to state 9


State 5

    2 block: "const" constDecls . "var" varDecls procDecls stmt

    "var"  shift, and go to state 10


State 6

    0 $accept: program $end .

    $default  accept


State 7

    7 constDef: identsym . "=" numbersym

    "="  shift, and go to state 11


State 8

    4 constDecls: "const" constDefs .
    6 constDefs: constDefs . "," constDef

    ","  shift, and go to state 12

    $default  reduce using rule 4 (constDecls)


State 9

    5 constDefs: constDef .

    $default  reduce using rule 5 (constDefs)


State 10

    2 block: "const" constDecls "var" . varDecls procDecls stmt

    "var"  shift, and go to state 13

    $default  reduce using rule 8 (varDecls)

    varDecls  go to state 14


State 11

    7 constDef: identsym "=" . numbersym

    numbersym  shift, and go to state 15


State 12

    6 constDefs: constDefs "," . constDef

    identsym  shift, and go to state 7

    constDef  go to state 16


State 13

    9 varDecls: "var" . varDecl

    identsym  shift, and go to state 17

    varDecl  go to state 18
    idents   go to state 19


State 14

    2 block: "const" constDecls "var" varDecls . procDecls stmt

    "procedure"  shift, and go to state 20

    "procedure"  [reduce using rule 13 (procDecls)]
    $default     reduce using rule 13 (procDecls)

    procDecls  go to state 21


State 15

    7 constDef: identsym "=" numbersym .

    $default  reduce using rule 7 (constDef)


State 16

    6 constDefs: constDefs "," constDef .

    $default  reduce using rule 6 (constDefs)


State 17

   11 idents: identsym .

    $default  reduce using rule 11 (idents)


State 18

    9 varDecls: "var" varDecl .

    $default  reduce using rule 9 (varDecls)


State 19

   10 varDecl: idents .
   12 idents: idents . "," identsym

    ","  shift, and go to state 22

    $default  reduce using rule 10 (varDecl)


State 20

   14 procDecls: "procedure" . identsym block

    identsym  shift, and go to state 23


State 21

    2 block: "const" constDecls "var" varDecls procDecls . stmt
   15 procDecls: procDecls . "procedure" identsym block

    identsym     shift, and go to state 24
    "procedure"  shift, and go to state 25
    "call"       shift, and go to state 26
    "begin"      shift, and go to state 27
    "if"         shift, and go to state 28
    "while"      shift, and go to state 29
    "read"       shift, and go to state 30
    "write"      shift, and go to state 31
    "skip"       shift, and go to state 32

    stmt        go to state 33
    assignStmt  go to state 34
    callStmt    go to state 35
    beginStmt   go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    writeStmt   go to state 40
    skipStmt    go to state 41


State 22

   12 idents: idents "," . identsym

    identsym  shift, and go to state 42


State 23

   14 procDecls: "procedure" identsym . block

    "const"  shift, and go to state 1

    block  go to state 43


State 24

   24 assignStmt: identsym . ":=" expr

    ":="  shift, and go to state 44


State 25

   15 procDecls: procDecls "procedure" . identsym block

    identsym  shift, and go to state 45


State 26

   25 callStmt: "call" . identsym

    identsym  shift, and go to state 46


State 27

   26 beginStmt: "begin" . stmts "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 26
    "begin"   shift, and go to state 27
    "if"      shift, and go to state 28
    "while"   shift, and go to state 29
    "read"    shift, and go to state 30
    "write"   shift, and go to state 31
    "skip"    shift, and go to state 32

    stmt        go to state 47
    assignStmt  go to state 34
    callStmt    go to state 35
    beginStmt   go to state 36
    stmts       go to state 48
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    writeStmt   go to state 40
    skipStmt    go to state 41


State 28

   29 ifStmt: "if" . condition "then" stmt "else" stmt "end"

    identsym   shift, and go to state 49
    numbersym  shift, and go to state 50
    "odd"      shift, and go to state 51
    "("        shift, and go to state 52

    condition     go to state 53
    oddCondition  go to state 54
    expr          go to state 55
    term          go to state 56
    factor        go to state 57


State 29

   30 whileStmt: "while" . condition "do" stmt "end"

    identsym   shift, and go to state 49
    numbersym  shift, and go to state 50
    "odd"      shift, and go to state 51
    "("        shift, and go to state 52

    condition     go to state 58
    oddCondition  go to state 54
    expr          go to state 55
    term          go to state 56
    factor        go to state 57


State 30

   31 readStmt: "read" . identsym

    identsym  shift, and go to state 59


State 31

   32 writeStmt: "write" . expr

    identsym   shift, and go to state 49
    numbersym  shift, and go to state 50
    "("        shift, and go to state 52

    expr    go to state 60
    term    go to state 56
    factor  go to state 57


State 32

   33 skipStmt: "skip" .

    $default  reduce using rule 33 (skipStmt)


State 33

    2 block: "const" constDecls "var" varDecls procDecls stmt .

    $default  reduce using rule 2 (block)


State 34

   16 stmt: assignStmt .

    $default  reduce using rule 16 (stmt)


State 35

   17 stmt: callStmt .

    $default  reduce using rule 17 (stmt)


State 36

   18 stmt: beginStmt .

    $default  reduce using rule 18 (stmt)


State 37

   19 stmt: ifStmt .

    $default  reduce using rule 19 (stmt)


State 38

   20 stmt: whileStmt .

    $default  reduce using rule 20 (stmt)


State 39

   21 stmt: readStmt .

    $default  reduce using rule 21 (stmt)


State 40

   22 stmt: writeStmt .

    $default  reduce using rule 22 (stmt)


State 41

   23 stmt: skipStmt .

    $default  reduce using rule 23 (stmt)


State 42

   12 idents: idents "," identsym .

    $default  reduce using rule 12 (idents)


State 43

   14 procDecls: "procedure" identsym block .

    $default  reduce using rule 14 (procDecls)


State 44

   24 assignStmt: identsym ":=" . expr

    identsym   shift, and go to state 49
    numbersym  shift, and go to state 50
    "("        shift, and go to state 52

    expr    go to state 61
    term    go to state 56
    factor  go to state 57


State 45

   15 procDecls: procDecls "procedure" identsym . block

    "const"  shift, and go to state 1

    block  go to state 62


State 46

   25 callStmt: "call" identsym .

    $default  reduce using rule 25 (callStmt)


State 47

   27 stmts: stmt .

    $default  reduce using rule 27 (stmts)


State 48

   26 beginStmt: "begin" stmts . "end"
   28 stmts: stmts . ";" stmt

    ";"    shift, and go to state 63
    "end"  shift, and go to state 64


State 49

   50 factor: identsym .

    $default  reduce using rule 50 (factor)


State 50

   49 factor: numbersym .

    $default  reduce using rule 49 (factor)


State 51

   36 oddCondition: "odd" . expr

    identsym   shift, and go to state 49
    numbersym  shift, and go to state 50
    "("        shift, and go to state 52

    expr    go to state 65
    term    go to state 56
    factor  go to state 57


State 52

   51 factor: "(" . expr ")"

    identsym   shift, and go to state 49
    numbersym  shift, and go to state 50
    "("        shift, and go to state 52

    expr    go to state 66
    term    go to state 56
    factor  go to state 57


State 53

   29 ifStmt: "if" condition . "then" stmt "else" stmt "end"

    "then"  shift, and go to state 67


State 54

   34 condition: oddCondition .

    $default  reduce using rule 34 (condition)


State 55

   35 condition: expr . relOp expr
   43 expr: expr . "+" term
   44     | expr . "-" term

    "+"   shift, and go to state 68
    "-"   shift, and go to state 69
    "="   shift, and go to state 70
    "<>"  shift, and go to state 71
    "<"   shift, and go to state 72
    "<="  shift, and go to state 73
    ">"   shift, and go to state 74
    ">="  shift, and go to state 75

    relOp  go to state 76


State 56

   45 expr: term .
   46 term: term . "*" factor
   47     | term . "/" factor

    "*"  shift, and go to state 77
    "/"  shift, and go to state 78

    $default  reduce using rule 45 (expr)


State 57

   48 term: factor .

    $default  reduce using rule 48 (term)


State 58

   30 whileStmt: "while" condition . "do" stmt "end"

    "do"  shift, and go to state 79


State 59

   31 readStmt: "read" identsym .

    $default  reduce using rule 31 (readStmt)


State 60

   32 writeStmt: "write" expr .
   43 expr: expr . "+" term
   44     | expr . "-" term

    "+"  shift, and go to state 68
    "-"  shift, and go to state 69

    $default  reduce using rule 32 (writeStmt)


State 61

   24 assignStmt: identsym ":=" expr .
   43 expr: expr . "+" term
   44     | expr . "-" term

    "+"  shift, and go to state 68
    "-"  shift, and go to state 69

    $default  reduce using rule 24 (assignStmt)


State 62

   15 procDecls: procDecls "procedure" identsym block .

    $default  reduce using rule 15 (procDecls)


State 63

   28 stmts: stmts ";" . stmt

    identsym  shift, and go to state 24
    "call"    shift, and go to state 26
    "begin"   shift, and go to state 27
    "if"      shift, and go to state 28
    "while"   shift, and go to state 29
    "read"    shift, and go to state 30
    "write"   shift, and go to state 31
    "skip"    shift, and go to state 32

    stmt        go to state 80
    assignStmt  go to state 34
    callStmt    go to state 35
    beginStmt   go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    writeStmt   go to state 40
    skipStmt    go to state 41


State 64

   26 beginStmt: "begin" stmts "end" .

    $default  reduce using rule 26 (beginStmt)


State 65

   36 oddCondition: "odd" expr .
   43 expr: expr . "+" term
   44     | expr . "-" term

    "+"  shift, and go to state 68
    "-"  shift, and go to state 69

    $default  reduce using rule 36 (oddCondition)


State 66

   43 expr: expr . "+" term
   44     | expr . "-" term
   51 factor: "(" expr . ")"

    "+"  shift, and go to state 68
    "-"  shift, and go to state 69
    ")"  shift, and go to state 81


State 67

   29 ifStmt: "if" condition "then" . stmt "else" stmt "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 26
    "begin"   shift, and go to state 27
    "if"      shift, and go to state 28
    "while"   shift, and go to state 29
    "read"    shift, and go to state 30
    "write"   shift, and go to state 31
    "skip"    shift, and go to state 32

    stmt        go to state 82
    assignStmt  go to state 34
    callStmt    go to state 35
    beginStmt   go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    writeStmt   go to state 40
    skipStmt    go to state 41


State 68

   43 expr: expr "+" . term

    identsym   shift, and go to state 49
    numbersym  shift, and go to state 50
    "("        shift, and go to state 52

    term    go to state 83
    factor  go to state 57


State 69

   44 expr: expr "-" . term

    identsym   shift, and go to state 49
    numbersym  shift, and go to state 50
    "("        shift, and go to state 52

    term    go to state 84
    factor  go to state 57


State 70

   37 relOp: "=" .

    $default  reduce using rule 37 (relOp)


State 71

   38 relOp: "<>" .

    $default  reduce using rule 38 (relOp)


State 72

   39 relOp: "<" .

    $default  reduce using rule 39 (relOp)


State 73

   40 relOp: "<=" .

    $default  reduce using rule 40 (relOp)


State 74

   41 relOp: ">" .

    $default  reduce using rule 41 (relOp)


State 75

   42 relOp: ">=" .

    $default  reduce using rule 42 (relOp)


State 76

   35 condition: expr relOp . expr

    identsym   shift, and go to state 49
    numbersym  shift, and go to state 50
    "("        shift, and go to state 52

    expr    go to state 85
    term    go to state 56
    factor  go to state 57


State 77

   46 term: term "*" . factor

    identsym   shift, and go to state 49
    numbersym  shift, and go to state 50
    "("        shift, and go to state 52

    factor  go to state 86


State 78

   47 term: term "/" . factor

    identsym   shift, and go to state 49
    numbersym  shift, and go to state 50
    "("        shift, and go to state 52

    factor  go to state 87


State 79

   30 whileStmt: "while" condition "do" . stmt "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 26
    "begin"   shift, and go to state 27
    "if"      shift, and go to state 28
    "while"   shift, and go to state 29
    "read"    shift, and go to state 30
    "write"   shift, and go to state 31
    "skip"    shift, and go to state 32

    stmt        go to state 88
    assignStmt  go to state 34
    callStmt    go to state 35
    beginStmt   go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    writeStmt   go to state 40
    skipStmt    go to state 41


State 80

   28 stmts: stmts ";" stmt .

    $default  reduce using rule 28 (stmts)


State 81

   51 factor: "(" expr ")" .

    $default  reduce using rule 51 (factor)


State 82

   29 ifStmt: "if" condition "then" stmt . "else" stmt "end"

    "else"  shift, and go to state 89


State 83

   43 expr: expr "+" term .
   46 term: term . "*" factor
   47     | term . "/" factor

    "*"  shift, and go to state 77
    "/"  shift, and go to state 78

    $default  reduce using rule 43 (expr)


State 84

   44 expr: expr "-" term .
   46 term: term . "*" factor
   47     | term . "/" factor

    "*"  shift, and go to state 77
    "/"  shift, and go to state 78

    $default  reduce using rule 44 (expr)


State 85

   35 condition: expr relOp expr .
   43 expr: expr . "+" term
   44     | expr . "-" term

    "+"  shift, and go to state 68
    "-"  shift, and go to state 69

    $default  reduce using rule 35 (condition)


State 86

   46 term: term "*" factor .

    $default  reduce using rule 46 (term)


State 87

   47 term: term "/" factor .

    $default  reduce using rule 47 (term)


State 88

   30 whileStmt: "while" condition "do" stmt . "end"

    "end"  shift, and go to state 90


State 89

   29 ifStmt: "if" condition "then" stmt "else" . stmt "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 26
    "begin"   shift, and go to state 27
    "if"      shift, and go to state 28
    "while"   shift, and go to state 29
    "read"    shift, and go to state 30
    "write"   shift, and go to state 31
    "skip"    shift, and go to state 32

    stmt        go to state 91
    assignStmt  go to state 34
    callStmt    go to state 35
    beginStmt   go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    writeStmt   go to state 40
    skipStmt    go to state 41


State 90

   30 whileStmt: "while" condition "do" stmt "end" .

    $default  reduce using rule 30 (whileStmt)


State 91

   29 ifStmt: "if" condition "then" stmt "else" stmt . "end"

    "end"  shift, and go to state 92


State 92

   29 ifStmt: "if" condition "then" stmt "else" stmt "end" .

    $default  reduce using rule 29 (ifStmt)
