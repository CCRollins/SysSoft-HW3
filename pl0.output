Nonterminals useless in grammar

    constDefs
    constDef


Terminals unused in grammar

    "."
    "call"
    "("
    ")"


Rules useless in grammar

   53 constDefs: constDef
   54          | constDefs "," constDef

   55 constDef: "const" identsym ":=" numbersym


Rules useless in parser due to conflicts

   42 expr: expr "+" term
   43     | expr "-" term

   45 term: term "*" factor
   46     | term "/" factor


State 46 conflicts: 8 shift/reduce
State 47 conflicts: 2 shift/reduce
State 52 conflicts: 2 shift/reduce, 11 reduce/reduce
State 54 conflicts: 2 shift/reduce, 11 reduce/reduce
State 58 conflicts: 2 shift/reduce, 2 reduce/reduce
State 75 conflicts: 2 shift/reduce
State 76 conflicts: 2 shift/reduce, 23 reduce/reduce
State 77 conflicts: 2 shift/reduce, 23 reduce/reduce
State 78 conflicts: 2 shift/reduce, 2 reduce/reduce
State 79 conflicts: 23 reduce/reduce
State 80 conflicts: 23 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: block

    2 block: constDecls varDecls procDecls stmt

    3 constDecls: empty
    4           | constDecls constDecl

    5 constDecl: "const"

    6 varDecls: empty
    7         | varDecls varDecl

    8 varDecl: "var" idents

    9 idents: identsym
   10       | idents "," identsym

   11 procDecls: empty
   12          | procDecls procDecl

   13 procDecl: "procedure" identsym ";" block

   14 stmt: assignStmt
   15     | callStmt
   16     | beginStmt
   17     | ifStmt
   18     | whileStmt
   19     | readStmt
   20     | writeStmt
   21     | skipStmt

   22 assignStmt: identsym ":=" expr

   23 callStmt: identsym

   24 beginStmt: "begin" stmts "end"

   25 ifStmt: "if" condition "then" stmt "else" stmt "end"

   26 whileStmt: "while" condition "do" stmt

   27 readStmt: "read" identsym

   28 writeStmt: "write" expr

   29 skipStmt: "skip"

   30 stmts: stmt

   31 condition: oddCondition
   32          | relOpCondition

   33 oddCondition: "odd" expr

   34 relOpCondition: expr relOp expr

   35 relOp: "="
   36      | "<>"
   37      | "<"
   38      | "<="
   39      | ">"
   40      | ">="

   41 expr: term
   42     | expr "+" term
   43     | expr "-" term

   44 term: factor
   45     | term "*" factor
   46     | term "/" factor

   47 factor: identsym
   48       | "-" numbersym
   49       | posSign numbersym
   50       | expr

   51 posSign: "+"

   52 empty: ε


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 9 10 13 22 23 27 47
    numbersym <number> (259) 48 49
    "+" <token> (260) 42 51
    "-" <token> (261) 43 48
    "*" <token> (262) 45
    "/" <token> (263) 46
    "." <token> (264)
    ";" <token> (265) 13
    "=" <token> (266) 35
    "," <token> (267) 10
    ":=" <token> (268) 22
    "const" <token> (269) 5
    "var" <token> (270) 8
    "procedure" <token> (271) 13
    "call" <token> (272)
    "begin" <token> (273) 24
    "end" <token> (274) 24 25
    "if" <token> (275) 25
    "then" <token> (276) 25
    "else" <token> (277) 25
    "while" <token> (278) 26
    "do" <token> (279) 26
    "read" <token> (280) 27
    "write" <token> (281) 28
    "skip" <token> (282) 29
    "odd" <token> (283) 33
    "<>" <token> (284) 36
    "<" <token> (285) 37
    "<=" <token> (286) 38
    ">" <token> (287) 39
    ">=" <token> (288) 40
    "(" <token> (289)
    ")" <token> (290)


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program <block> (37)
        on left: 1
        on right: 0
    block <block> (38)
        on left: 2
        on right: 1 13
    constDecls <const_decls> (39)
        on left: 3 4
        on right: 2 4
    constDecl <const_decl> (40)
        on left: 5
        on right: 4
    varDecls <var_decls> (41)
        on left: 6 7
        on right: 2 7
    varDecl <var_decl> (42)
        on left: 8
        on right: 7
    idents <idents> (43)
        on left: 9 10
        on right: 8 10
    procDecls <proc_decls> (44)
        on left: 11 12
        on right: 2 12
    procDecl <proc_decl> (45)
        on left: 13
        on right: 12
    stmt <stmt> (46)
        on left: 14 15 16 17 18 19 20 21
        on right: 2 25 26 30
    assignStmt <assign_stmt> (47)
        on left: 22
        on right: 14
    callStmt <call_stmt> (48)
        on left: 23
        on right: 15
    beginStmt <begin_stmt> (49)
        on left: 24
        on right: 16
    ifStmt <if_stmt> (50)
        on left: 25
        on right: 17
    whileStmt <while_stmt> (51)
        on left: 26
        on right: 18
    readStmt <read_stmt> (52)
        on left: 27
        on right: 19
    writeStmt <write_stmt> (53)
        on left: 28
        on right: 20
    skipStmt <skip_stmt> (54)
        on left: 29
        on right: 21
    stmts <stmts> (55)
        on left: 30
        on right: 24
    condition <condition> (56)
        on left: 31 32
        on right: 25 26
    oddCondition <odd_condition> (57)
        on left: 33
        on right: 31
    relOpCondition <rel_op_condition> (58)
        on left: 34
        on right: 32
    relOp <token> (59)
        on left: 35 36 37 38 39 40
        on right: 34
    expr <expr> (60)
        on left: 41 42 43
        on right: 22 28 33 34 42 43 50
    term <expr> (61)
        on left: 44 45 46
        on right: 41 42 43 45 46
    factor <expr> (62)
        on left: 47 48 49 50
        on right: 44 45 46
    posSign <token> (63)
        on left: 51
        on right: 49
    empty <empty> (64)
        on left: 52
        on right: 3 6 11


State 0

    0 $accept: • program $end

    $default  reduce using rule 52 (empty)

    program     go to state 1
    block       go to state 2
    constDecls  go to state 3
    empty       go to state 4


State 1

    0 $accept: program • $end

    $end  shift, and go to state 5


State 2

    1 program: block •

    $default  reduce using rule 1 (program)


State 3

    2 block: constDecls • varDecls procDecls stmt
    4 constDecls: constDecls • constDecl

    "const"  shift, and go to state 6

    $default  reduce using rule 52 (empty)

    constDecl  go to state 7
    varDecls   go to state 8
    empty      go to state 9


State 4

    3 constDecls: empty •

    $default  reduce using rule 3 (constDecls)


State 5

    0 $accept: program $end •

    $default  accept


State 6

    5 constDecl: "const" •

    $default  reduce using rule 5 (constDecl)


State 7

    4 constDecls: constDecls constDecl •

    $default  reduce using rule 4 (constDecls)


State 8

    2 block: constDecls varDecls • procDecls stmt
    7 varDecls: varDecls • varDecl

    "var"  shift, and go to state 10

    $default  reduce using rule 52 (empty)

    varDecl    go to state 11
    procDecls  go to state 12
    empty      go to state 13


State 9

    6 varDecls: empty •

    $default  reduce using rule 6 (varDecls)


State 10

    8 varDecl: "var" • idents

    identsym  shift, and go to state 14

    idents  go to state 15


State 11

    7 varDecls: varDecls varDecl •

    $default  reduce using rule 7 (varDecls)


State 12

    2 block: constDecls varDecls procDecls • stmt
   12 procDecls: procDecls • procDecl

    identsym     shift, and go to state 16
    "procedure"  shift, and go to state 17
    "begin"      shift, and go to state 18
    "if"         shift, and go to state 19
    "while"      shift, and go to state 20
    "read"       shift, and go to state 21
    "write"      shift, and go to state 22
    "skip"       shift, and go to state 23

    procDecl    go to state 24
    stmt        go to state 25
    assignStmt  go to state 26
    callStmt    go to state 27
    beginStmt   go to state 28
    ifStmt      go to state 29
    whileStmt   go to state 30
    readStmt    go to state 31
    writeStmt   go to state 32
    skipStmt    go to state 33


State 13

   11 procDecls: empty •

    $default  reduce using rule 11 (procDecls)


State 14

    9 idents: identsym •

    $default  reduce using rule 9 (idents)


State 15

    8 varDecl: "var" idents •
   10 idents: idents • "," identsym

    ","  shift, and go to state 34

    $default  reduce using rule 8 (varDecl)


State 16

   22 assignStmt: identsym • ":=" expr
   23 callStmt: identsym •

    ":="  shift, and go to state 35

    $default  reduce using rule 23 (callStmt)


State 17

   13 procDecl: "procedure" • identsym ";" block

    identsym  shift, and go to state 36


State 18

   24 beginStmt: "begin" • stmts "end"

    identsym  shift, and go to state 16
    "begin"   shift, and go to state 18
    "if"      shift, and go to state 19
    "while"   shift, and go to state 20
    "read"    shift, and go to state 21
    "write"   shift, and go to state 22
    "skip"    shift, and go to state 23

    stmt        go to state 37
    assignStmt  go to state 26
    callStmt    go to state 27
    beginStmt   go to state 28
    ifStmt      go to state 29
    whileStmt   go to state 30
    readStmt    go to state 31
    writeStmt   go to state 32
    skipStmt    go to state 33
    stmts       go to state 38


State 19

   25 ifStmt: "if" • condition "then" stmt "else" stmt "end"

    identsym  shift, and go to state 39
    "+"       shift, and go to state 40
    "-"       shift, and go to state 41
    "odd"     shift, and go to state 42

    condition       go to state 43
    oddCondition    go to state 44
    relOpCondition  go to state 45
    expr            go to state 46
    term            go to state 47
    factor          go to state 48
    posSign         go to state 49


State 20

   26 whileStmt: "while" • condition "do" stmt

    identsym  shift, and go to state 39
    "+"       shift, and go to state 40
    "-"       shift, and go to state 41
    "odd"     shift, and go to state 42

    condition       go to state 50
    oddCondition    go to state 44
    relOpCondition  go to state 45
    expr            go to state 46
    term            go to state 47
    factor          go to state 48
    posSign         go to state 49


State 21

   27 readStmt: "read" • identsym

    identsym  shift, and go to state 51


State 22

   28 writeStmt: "write" • expr

    identsym  shift, and go to state 39
    "+"       shift, and go to state 40
    "-"       shift, and go to state 41

    expr     go to state 52
    term     go to state 47
    factor   go to state 48
    posSign  go to state 49


State 23

   29 skipStmt: "skip" •

    $default  reduce using rule 29 (skipStmt)


State 24

   12 procDecls: procDecls procDecl •

    $default  reduce using rule 12 (procDecls)


State 25

    2 block: constDecls varDecls procDecls stmt •

    $default  reduce using rule 2 (block)


State 26

   14 stmt: assignStmt •

    $default  reduce using rule 14 (stmt)


State 27

   15 stmt: callStmt •

    $default  reduce using rule 15 (stmt)


State 28

   16 stmt: beginStmt •

    $default  reduce using rule 16 (stmt)


State 29

   17 stmt: ifStmt •

    $default  reduce using rule 17 (stmt)


State 30

   18 stmt: whileStmt •

    $default  reduce using rule 18 (stmt)


State 31

   19 stmt: readStmt •

    $default  reduce using rule 19 (stmt)


State 32

   20 stmt: writeStmt •

    $default  reduce using rule 20 (stmt)


State 33

   21 stmt: skipStmt •

    $default  reduce using rule 21 (stmt)


State 34

   10 idents: idents "," • identsym

    identsym  shift, and go to state 53


State 35

   22 assignStmt: identsym ":=" • expr

    identsym  shift, and go to state 39
    "+"       shift, and go to state 40
    "-"       shift, and go to state 41

    expr     go to state 54
    term     go to state 47
    factor   go to state 48
    posSign  go to state 49


State 36

   13 procDecl: "procedure" identsym • ";" block

    ";"  shift, and go to state 55


State 37

   30 stmts: stmt •

    $default  reduce using rule 30 (stmts)


State 38

   24 beginStmt: "begin" stmts • "end"

    "end"  shift, and go to state 56


State 39

   47 factor: identsym •

    $default  reduce using rule 47 (factor)


State 40

   51 posSign: "+" •

    $default  reduce using rule 51 (posSign)


State 41

   48 factor: "-" • numbersym

    numbersym  shift, and go to state 57


State 42

   33 oddCondition: "odd" • expr

    identsym  shift, and go to state 39
    "+"       shift, and go to state 40
    "-"       shift, and go to state 41

    expr     go to state 58
    term     go to state 47
    factor   go to state 48
    posSign  go to state 49


State 43

   25 ifStmt: "if" condition • "then" stmt "else" stmt "end"

    "then"  shift, and go to state 59


State 44

   31 condition: oddCondition •

    $default  reduce using rule 31 (condition)


State 45

   32 condition: relOpCondition •

    $default  reduce using rule 32 (condition)


State 46

   34 relOpCondition: expr • relOp expr
   42 expr: expr • "+" term
   43     | expr • "-" term
   50 factor: expr •

    "+"   shift, and go to state 60
    "-"   shift, and go to state 61
    "="   shift, and go to state 62
    "<>"  shift, and go to state 63
    "<"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">"   shift, and go to state 66
    ">="  shift, and go to state 67

    "+"       [reduce using rule 50 (factor)]
    "-"       [reduce using rule 50 (factor)]
    "="       [reduce using rule 50 (factor)]
    "<>"      [reduce using rule 50 (factor)]
    "<"       [reduce using rule 50 (factor)]
    "<="      [reduce using rule 50 (factor)]
    ">"       [reduce using rule 50 (factor)]
    ">="      [reduce using rule 50 (factor)]
    $default  reduce using rule 50 (factor)

    relOp  go to state 68


State 47

   41 expr: term •
   45 term: term • "*" factor
   46     | term • "/" factor

    "*"  shift, and go to state 69
    "/"  shift, and go to state 70

    "*"       [reduce using rule 41 (expr)]
    "/"       [reduce using rule 41 (expr)]
    $default  reduce using rule 41 (expr)


State 48

   44 term: factor •

    $default  reduce using rule 44 (term)


State 49

   49 factor: posSign • numbersym

    numbersym  shift, and go to state 71


State 50

   26 whileStmt: "while" condition • "do" stmt

    "do"  shift, and go to state 72


State 51

   27 readStmt: "read" identsym •

    $default  reduce using rule 27 (readStmt)


State 52

   28 writeStmt: "write" expr •
   42 expr: expr • "+" term
   43     | expr • "-" term
   50 factor: expr •

    "+"  shift, and go to state 60
    "-"  shift, and go to state 61

    $end         reduce using rule 28 (writeStmt)
    $end         [reduce using rule 50 (factor)]
    identsym     reduce using rule 28 (writeStmt)
    identsym     [reduce using rule 50 (factor)]
    "+"          [reduce using rule 50 (factor)]
    "-"          [reduce using rule 50 (factor)]
    "*"          reduce using rule 50 (factor)
    "/"          reduce using rule 50 (factor)
    "procedure"  reduce using rule 28 (writeStmt)
    "procedure"  [reduce using rule 50 (factor)]
    "begin"      reduce using rule 28 (writeStmt)
    "begin"      [reduce using rule 50 (factor)]
    "end"        reduce using rule 28 (writeStmt)
    "end"        [reduce using rule 50 (factor)]
    "if"         reduce using rule 28 (writeStmt)
    "if"         [reduce using rule 50 (factor)]
    "else"       reduce using rule 28 (writeStmt)
    "else"       [reduce using rule 50 (factor)]
    "while"      reduce using rule 28 (writeStmt)
    "while"      [reduce using rule 50 (factor)]
    "read"       reduce using rule 28 (writeStmt)
    "read"       [reduce using rule 50 (factor)]
    "write"      reduce using rule 28 (writeStmt)
    "write"      [reduce using rule 50 (factor)]
    "skip"       reduce using rule 28 (writeStmt)
    "skip"       [reduce using rule 50 (factor)]
    $default     reduce using rule 28 (writeStmt)


State 53

   10 idents: idents "," identsym •

    $default  reduce using rule 10 (idents)


State 54

   22 assignStmt: identsym ":=" expr •
   42 expr: expr • "+" term
   43     | expr • "-" term
   50 factor: expr •

    "+"  shift, and go to state 60
    "-"  shift, and go to state 61

    $end         reduce using rule 22 (assignStmt)
    $end         [reduce using rule 50 (factor)]
    identsym     reduce using rule 22 (assignStmt)
    identsym     [reduce using rule 50 (factor)]
    "+"          [reduce using rule 50 (factor)]
    "-"          [reduce using rule 50 (factor)]
    "*"          reduce using rule 50 (factor)
    "/"          reduce using rule 50 (factor)
    "procedure"  reduce using rule 22 (assignStmt)
    "procedure"  [reduce using rule 50 (factor)]
    "begin"      reduce using rule 22 (assignStmt)
    "begin"      [reduce using rule 50 (factor)]
    "end"        reduce using rule 22 (assignStmt)
    "end"        [reduce using rule 50 (factor)]
    "if"         reduce using rule 22 (assignStmt)
    "if"         [reduce using rule 50 (factor)]
    "else"       reduce using rule 22 (assignStmt)
    "else"       [reduce using rule 50 (factor)]
    "while"      reduce using rule 22 (assignStmt)
    "while"      [reduce using rule 50 (factor)]
    "read"       reduce using rule 22 (assignStmt)
    "read"       [reduce using rule 50 (factor)]
    "write"      reduce using rule 22 (assignStmt)
    "write"      [reduce using rule 50 (factor)]
    "skip"       reduce using rule 22 (assignStmt)
    "skip"       [reduce using rule 50 (factor)]
    $default     reduce using rule 22 (assignStmt)


State 55

   13 procDecl: "procedure" identsym ";" • block

    $default  reduce using rule 52 (empty)

    block       go to state 73
    constDecls  go to state 3
    empty       go to state 4


State 56

   24 beginStmt: "begin" stmts "end" •

    $default  reduce using rule 24 (beginStmt)


State 57

   48 factor: "-" numbersym •

    $default  reduce using rule 48 (factor)


State 58

   33 oddCondition: "odd" expr •
   42 expr: expr • "+" term
   43     | expr • "-" term
   50 factor: expr •

    "+"  shift, and go to state 60
    "-"  shift, and go to state 61

    "+"       [reduce using rule 50 (factor)]
    "-"       [reduce using rule 50 (factor)]
    "*"       reduce using rule 50 (factor)
    "/"       reduce using rule 50 (factor)
    "then"    reduce using rule 33 (oddCondition)
    "then"    [reduce using rule 50 (factor)]
    "do"      reduce using rule 33 (oddCondition)
    "do"      [reduce using rule 50 (factor)]
    $default  reduce using rule 33 (oddCondition)


State 59

   25 ifStmt: "if" condition "then" • stmt "else" stmt "end"

    identsym  shift, and go to state 16
    "begin"   shift, and go to state 18
    "if"      shift, and go to state 19
    "while"   shift, and go to state 20
    "read"    shift, and go to state 21
    "write"   shift, and go to state 22
    "skip"    shift, and go to state 23

    stmt        go to state 74
    assignStmt  go to state 26
    callStmt    go to state 27
    beginStmt   go to state 28
    ifStmt      go to state 29
    whileStmt   go to state 30
    readStmt    go to state 31
    writeStmt   go to state 32
    skipStmt    go to state 33


State 60

   42 expr: expr "+" • term

    identsym  shift, and go to state 39
    "+"       shift, and go to state 40
    "-"       shift, and go to state 41

    expr     go to state 75
    term     go to state 76
    factor   go to state 48
    posSign  go to state 49


State 61

   43 expr: expr "-" • term

    identsym  shift, and go to state 39
    "+"       shift, and go to state 40
    "-"       shift, and go to state 41

    expr     go to state 75
    term     go to state 77
    factor   go to state 48
    posSign  go to state 49


State 62

   35 relOp: "=" •

    $default  reduce using rule 35 (relOp)


State 63

   36 relOp: "<>" •

    $default  reduce using rule 36 (relOp)


State 64

   37 relOp: "<" •

    $default  reduce using rule 37 (relOp)


State 65

   38 relOp: "<=" •

    $default  reduce using rule 38 (relOp)


State 66

   39 relOp: ">" •

    $default  reduce using rule 39 (relOp)


State 67

   40 relOp: ">=" •

    $default  reduce using rule 40 (relOp)


State 68

   34 relOpCondition: expr relOp • expr

    identsym  shift, and go to state 39
    "+"       shift, and go to state 40
    "-"       shift, and go to state 41

    expr     go to state 78
    term     go to state 47
    factor   go to state 48
    posSign  go to state 49


State 69

   45 term: term "*" • factor

    identsym  shift, and go to state 39
    "+"       shift, and go to state 40
    "-"       shift, and go to state 41

    expr     go to state 75
    term     go to state 47
    factor   go to state 79
    posSign  go to state 49


State 70

   46 term: term "/" • factor

    identsym  shift, and go to state 39
    "+"       shift, and go to state 40
    "-"       shift, and go to state 41

    expr     go to state 75
    term     go to state 47
    factor   go to state 80
    posSign  go to state 49


State 71

   49 factor: posSign numbersym •

    $default  reduce using rule 49 (factor)


State 72

   26 whileStmt: "while" condition "do" • stmt

    identsym  shift, and go to state 16
    "begin"   shift, and go to state 18
    "if"      shift, and go to state 19
    "while"   shift, and go to state 20
    "read"    shift, and go to state 21
    "write"   shift, and go to state 22
    "skip"    shift, and go to state 23

    stmt        go to state 81
    assignStmt  go to state 26
    callStmt    go to state 27
    beginStmt   go to state 28
    ifStmt      go to state 29
    whileStmt   go to state 30
    readStmt    go to state 31
    writeStmt   go to state 32
    skipStmt    go to state 33


State 73

   13 procDecl: "procedure" identsym ";" block •

    $default  reduce using rule 13 (procDecl)


State 74

   25 ifStmt: "if" condition "then" stmt • "else" stmt "end"

    "else"  shift, and go to state 82


State 75

   42 expr: expr • "+" term
   43     | expr • "-" term
   50 factor: expr •

    "+"  shift, and go to state 60
    "-"  shift, and go to state 61

    "+"       [reduce using rule 50 (factor)]
    "-"       [reduce using rule 50 (factor)]
    $default  reduce using rule 50 (factor)


State 76

   41 expr: term •
   42     | expr "+" term •
   45 term: term • "*" factor
   46     | term • "/" factor

    "*"  shift, and go to state 69
    "/"  shift, and go to state 70

    $end         reduce using rule 41 (expr)
    $end         [reduce using rule 42 (expr)]
    identsym     reduce using rule 41 (expr)
    identsym     [reduce using rule 42 (expr)]
    "+"          reduce using rule 41 (expr)
    "+"          [reduce using rule 42 (expr)]
    "-"          reduce using rule 41 (expr)
    "-"          [reduce using rule 42 (expr)]
    "*"          [reduce using rule 41 (expr)]
    "*"          [reduce using rule 42 (expr)]
    "/"          [reduce using rule 41 (expr)]
    "/"          [reduce using rule 42 (expr)]
    "="          reduce using rule 41 (expr)
    "="          [reduce using rule 42 (expr)]
    "procedure"  reduce using rule 41 (expr)
    "procedure"  [reduce using rule 42 (expr)]
    "begin"      reduce using rule 41 (expr)
    "begin"      [reduce using rule 42 (expr)]
    "end"        reduce using rule 41 (expr)
    "end"        [reduce using rule 42 (expr)]
    "if"         reduce using rule 41 (expr)
    "if"         [reduce using rule 42 (expr)]
    "then"       reduce using rule 41 (expr)
    "then"       [reduce using rule 42 (expr)]
    "else"       reduce using rule 41 (expr)
    "else"       [reduce using rule 42 (expr)]
    "while"      reduce using rule 41 (expr)
    "while"      [reduce using rule 42 (expr)]
    "do"         reduce using rule 41 (expr)
    "do"         [reduce using rule 42 (expr)]
    "read"       reduce using rule 41 (expr)
    "read"       [reduce using rule 42 (expr)]
    "write"      reduce using rule 41 (expr)
    "write"      [reduce using rule 42 (expr)]
    "skip"       reduce using rule 41 (expr)
    "skip"       [reduce using rule 42 (expr)]
    "<>"         reduce using rule 41 (expr)
    "<>"         [reduce using rule 42 (expr)]
    "<"          reduce using rule 41 (expr)
    "<"          [reduce using rule 42 (expr)]
    "<="         reduce using rule 41 (expr)
    "<="         [reduce using rule 42 (expr)]
    ">"          reduce using rule 41 (expr)
    ">"          [reduce using rule 42 (expr)]
    ">="         reduce using rule 41 (expr)
    ">="         [reduce using rule 42 (expr)]
    $default     reduce using rule 41 (expr)


State 77

   41 expr: term •
   43     | expr "-" term •
   45 term: term • "*" factor
   46     | term • "/" factor

    "*"  shift, and go to state 69
    "/"  shift, and go to state 70

    $end         reduce using rule 41 (expr)
    $end         [reduce using rule 43 (expr)]
    identsym     reduce using rule 41 (expr)
    identsym     [reduce using rule 43 (expr)]
    "+"          reduce using rule 41 (expr)
    "+"          [reduce using rule 43 (expr)]
    "-"          reduce using rule 41 (expr)
    "-"          [reduce using rule 43 (expr)]
    "*"          [reduce using rule 41 (expr)]
    "*"          [reduce using rule 43 (expr)]
    "/"          [reduce using rule 41 (expr)]
    "/"          [reduce using rule 43 (expr)]
    "="          reduce using rule 41 (expr)
    "="          [reduce using rule 43 (expr)]
    "procedure"  reduce using rule 41 (expr)
    "procedure"  [reduce using rule 43 (expr)]
    "begin"      reduce using rule 41 (expr)
    "begin"      [reduce using rule 43 (expr)]
    "end"        reduce using rule 41 (expr)
    "end"        [reduce using rule 43 (expr)]
    "if"         reduce using rule 41 (expr)
    "if"         [reduce using rule 43 (expr)]
    "then"       reduce using rule 41 (expr)
    "then"       [reduce using rule 43 (expr)]
    "else"       reduce using rule 41 (expr)
    "else"       [reduce using rule 43 (expr)]
    "while"      reduce using rule 41 (expr)
    "while"      [reduce using rule 43 (expr)]
    "do"         reduce using rule 41 (expr)
    "do"         [reduce using rule 43 (expr)]
    "read"       reduce using rule 41 (expr)
    "read"       [reduce using rule 43 (expr)]
    "write"      reduce using rule 41 (expr)
    "write"      [reduce using rule 43 (expr)]
    "skip"       reduce using rule 41 (expr)
    "skip"       [reduce using rule 43 (expr)]
    "<>"         reduce using rule 41 (expr)
    "<>"         [reduce using rule 43 (expr)]
    "<"          reduce using rule 41 (expr)
    "<"          [reduce using rule 43 (expr)]
    "<="         reduce using rule 41 (expr)
    "<="         [reduce using rule 43 (expr)]
    ">"          reduce using rule 41 (expr)
    ">"          [reduce using rule 43 (expr)]
    ">="         reduce using rule 41 (expr)
    ">="         [reduce using rule 43 (expr)]
    $default     reduce using rule 41 (expr)


State 78

   34 relOpCondition: expr relOp expr •
   42 expr: expr • "+" term
   43     | expr • "-" term
   50 factor: expr •

    "+"  shift, and go to state 60
    "-"  shift, and go to state 61

    "+"       [reduce using rule 50 (factor)]
    "-"       [reduce using rule 50 (factor)]
    "*"       reduce using rule 50 (factor)
    "/"       reduce using rule 50 (factor)
    "then"    reduce using rule 34 (relOpCondition)
    "then"    [reduce using rule 50 (factor)]
    "do"      reduce using rule 34 (relOpCondition)
    "do"      [reduce using rule 50 (factor)]
    $default  reduce using rule 34 (relOpCondition)


State 79

   44 term: factor •
   45     | term "*" factor •

    $end         reduce using rule 44 (term)
    $end         [reduce using rule 45 (term)]
    identsym     reduce using rule 44 (term)
    identsym     [reduce using rule 45 (term)]
    "+"          reduce using rule 44 (term)
    "+"          [reduce using rule 45 (term)]
    "-"          reduce using rule 44 (term)
    "-"          [reduce using rule 45 (term)]
    "*"          reduce using rule 44 (term)
    "*"          [reduce using rule 45 (term)]
    "/"          reduce using rule 44 (term)
    "/"          [reduce using rule 45 (term)]
    "="          reduce using rule 44 (term)
    "="          [reduce using rule 45 (term)]
    "procedure"  reduce using rule 44 (term)
    "procedure"  [reduce using rule 45 (term)]
    "begin"      reduce using rule 44 (term)
    "begin"      [reduce using rule 45 (term)]
    "end"        reduce using rule 44 (term)
    "end"        [reduce using rule 45 (term)]
    "if"         reduce using rule 44 (term)
    "if"         [reduce using rule 45 (term)]
    "then"       reduce using rule 44 (term)
    "then"       [reduce using rule 45 (term)]
    "else"       reduce using rule 44 (term)
    "else"       [reduce using rule 45 (term)]
    "while"      reduce using rule 44 (term)
    "while"      [reduce using rule 45 (term)]
    "do"         reduce using rule 44 (term)
    "do"         [reduce using rule 45 (term)]
    "read"       reduce using rule 44 (term)
    "read"       [reduce using rule 45 (term)]
    "write"      reduce using rule 44 (term)
    "write"      [reduce using rule 45 (term)]
    "skip"       reduce using rule 44 (term)
    "skip"       [reduce using rule 45 (term)]
    "<>"         reduce using rule 44 (term)
    "<>"         [reduce using rule 45 (term)]
    "<"          reduce using rule 44 (term)
    "<"          [reduce using rule 45 (term)]
    "<="         reduce using rule 44 (term)
    "<="         [reduce using rule 45 (term)]
    ">"          reduce using rule 44 (term)
    ">"          [reduce using rule 45 (term)]
    ">="         reduce using rule 44 (term)
    ">="         [reduce using rule 45 (term)]
    $default     reduce using rule 44 (term)


State 80

   44 term: factor •
   46     | term "/" factor •

    $end         reduce using rule 44 (term)
    $end         [reduce using rule 46 (term)]
    identsym     reduce using rule 44 (term)
    identsym     [reduce using rule 46 (term)]
    "+"          reduce using rule 44 (term)
    "+"          [reduce using rule 46 (term)]
    "-"          reduce using rule 44 (term)
    "-"          [reduce using rule 46 (term)]
    "*"          reduce using rule 44 (term)
    "*"          [reduce using rule 46 (term)]
    "/"          reduce using rule 44 (term)
    "/"          [reduce using rule 46 (term)]
    "="          reduce using rule 44 (term)
    "="          [reduce using rule 46 (term)]
    "procedure"  reduce using rule 44 (term)
    "procedure"  [reduce using rule 46 (term)]
    "begin"      reduce using rule 44 (term)
    "begin"      [reduce using rule 46 (term)]
    "end"        reduce using rule 44 (term)
    "end"        [reduce using rule 46 (term)]
    "if"         reduce using rule 44 (term)
    "if"         [reduce using rule 46 (term)]
    "then"       reduce using rule 44 (term)
    "then"       [reduce using rule 46 (term)]
    "else"       reduce using rule 44 (term)
    "else"       [reduce using rule 46 (term)]
    "while"      reduce using rule 44 (term)
    "while"      [reduce using rule 46 (term)]
    "do"         reduce using rule 44 (term)
    "do"         [reduce using rule 46 (term)]
    "read"       reduce using rule 44 (term)
    "read"       [reduce using rule 46 (term)]
    "write"      reduce using rule 44 (term)
    "write"      [reduce using rule 46 (term)]
    "skip"       reduce using rule 44 (term)
    "skip"       [reduce using rule 46 (term)]
    "<>"         reduce using rule 44 (term)
    "<>"         [reduce using rule 46 (term)]
    "<"          reduce using rule 44 (term)
    "<"          [reduce using rule 46 (term)]
    "<="         reduce using rule 44 (term)
    "<="         [reduce using rule 46 (term)]
    ">"          reduce using rule 44 (term)
    ">"          [reduce using rule 46 (term)]
    ">="         reduce using rule 44 (term)
    ">="         [reduce using rule 46 (term)]
    $default     reduce using rule 44 (term)


State 81

   26 whileStmt: "while" condition "do" stmt •

    $default  reduce using rule 26 (whileStmt)


State 82

   25 ifStmt: "if" condition "then" stmt "else" • stmt "end"

    identsym  shift, and go to state 16
    "begin"   shift, and go to state 18
    "if"      shift, and go to state 19
    "while"   shift, and go to state 20
    "read"    shift, and go to state 21
    "write"   shift, and go to state 22
    "skip"    shift, and go to state 23

    stmt        go to state 83
    assignStmt  go to state 26
    callStmt    go to state 27
    beginStmt   go to state 28
    ifStmt      go to state 29
    whileStmt   go to state 30
    readStmt    go to state 31
    writeStmt   go to state 32
    skipStmt    go to state 33


State 83

   25 ifStmt: "if" condition "then" stmt "else" stmt • "end"

    "end"  shift, and go to state 84


State 84

   25 ifStmt: "if" condition "then" stmt "else" stmt "end" •

    $default  reduce using rule 25 (ifStmt)
