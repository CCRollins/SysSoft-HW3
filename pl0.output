Nonterminals useless in grammar

    empty


Terminals unused in grammar

    "."
    ";"
    "("
    ")"


Rules useless in grammar

   57 empty: %empty


Rules useless in parser due to conflicts

   47 expr: expr "+" term
   48     | expr "-" term

   50 term: term "*" factor
   51     | term "/" factor

   52 factor: identsym


State 45 conflicts: 24 reduce/reduce
State 52 conflicts: 10 shift/reduce
State 54 conflicts: 2 shift/reduce
State 59 conflicts: 4 shift/reduce, 11 reduce/reduce
State 60 conflicts: 4 shift/reduce, 11 reduce/reduce
State 63 conflicts: 4 shift/reduce, 2 reduce/reduce
State 65 conflicts: 1 shift/reduce
State 80 conflicts: 4 shift/reduce
State 81 conflicts: 2 shift/reduce, 24 reduce/reduce
State 82 conflicts: 12 reduce/reduce
State 83 conflicts: 2 shift/reduce, 24 reduce/reduce
State 84 conflicts: 4 shift/reduce, 24 reduce/reduce
State 85 conflicts: 4 shift/reduce, 6 reduce/reduce
State 86 conflicts: 24 reduce/reduce
State 87 conflicts: 24 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: block

    2 block: constDecls varDecls procDecls stmt

    3 constDecls: %empty
    4           | constDecl

    5 constDecl: "const" constDefs

    6 constDefs: constDef
    7          | constDefs "," constDef

    8 constDef: identsym "=" numbersym

    9 varDecls: %empty
   10         | varDecl

   11 varDecl: "var" idents

   12 idents: identsym

   13 procDecls: %empty
   14          | procDecl

   15 procDecl: "procedure" identsym block

   16 stmt: assignStmt
   17     | callStmt
   18     | beginStmt
   19     | ifStmt
   20     | whileStmt
   21     | readStmt
   22     | writeStmt
   23     | skipStmt

   24 assignStmt: identsym ":=" expr

   25 stmts: stmt

   26 callStmt: "call" identsym

   27 beginStmt: "begin" stmts "end"

   28 ifStmt: "if" condition "then" stmt "else" stmt "end"

   29 whileStmt: "while" condition "do" stmt "end"

   30 readStmt: "read" identsym

   31 writeStmt: "write" expr

   32 skipStmt: "skip"

   33 condition: oddCondition
   34          | relOpCondition

   35 oddCondition: "odd" expr

   36 expr: expr relOpCondition expr
   37     | identsym
   38     | numbersym

   39 relOpCondition: expr relOp expr

   40 relOp: "="
   41      | "<>"
   42      | "<"
   43      | "<="
   44      | ">"
   45      | ">="

   46 expr: term
   47     | expr "+" term
   48     | expr "-" term

   49 term: factor
   50     | term "*" factor
   51     | term "/" factor

   52 factor: identsym
   53       | "-" numbersym
   54       | posSign numbersym
   55       | expr

   56 posSign: "+"


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 8 12 15 24 26 30 37 52
    numbersym <number> (259) 8 38 53 54
    "+" <token> (260) 47 56
    "-" <token> (261) 48 53
    "*" <token> (262) 50
    "/" <token> (263) 51
    "." <token> (264)
    ";" <token> (265)
    "=" <token> (266) 8 40
    "," <token> (267) 7
    ":=" <token> (268) 24
    "const" <token> (269) 5
    "var" <token> (270) 11
    "procedure" <token> (271) 15
    "call" <token> (272) 26
    "begin" <token> (273) 27
    "end" <token> (274) 27 28 29
    "if" <token> (275) 28
    "then" <token> (276) 28
    "else" <token> (277) 28
    "while" <token> (278) 29
    "do" <token> (279) 29
    "read" <token> (280) 30
    "write" <token> (281) 31
    "skip" <token> (282) 32
    "odd" <token> (283) 35
    "<>" <token> (284) 41
    "<" <token> (285) 42
    "<=" <token> (286) 43
    ">" <token> (287) 44
    ">=" <token> (288) 45
    "(" <token> (289)
    ")" <token> (290)


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program <block> (37)
        on left: 1
        on right: 0
    block <block> (38)
        on left: 2
        on right: 1 15
    constDecls <const_decls> (39)
        on left: 3 4
        on right: 2
    constDecl <const_decl> (40)
        on left: 5
        on right: 4
    constDefs <const_defs> (41)
        on left: 6 7
        on right: 5 7
    constDef <const_def> (42)
        on left: 8
        on right: 6 7
    varDecls <var_decls> (43)
        on left: 9 10
        on right: 2
    varDecl <var_decl> (44)
        on left: 11
        on right: 10
    idents <idents> (45)
        on left: 12
        on right: 11
    procDecls <proc_decls> (46)
        on left: 13 14
        on right: 2
    procDecl <proc_decl> (47)
        on left: 15
        on right: 14
    stmt <stmt> (48)
        on left: 16 17 18 19 20 21 22 23
        on right: 2 25 28 29
    assignStmt <assign_stmt_t> (49)
        on left: 24
        on right: 16
    stmts <stmts> (50)
        on left: 25
        on right: 27
    callStmt <call_stmt_t> (51)
        on left: 26
        on right: 17
    beginStmt <begin_stmt_t> (52)
        on left: 27
        on right: 18
    ifStmt <if_stmt_t> (53)
        on left: 28
        on right: 19
    whileStmt <while_stmt_t> (54)
        on left: 29
        on right: 20
    readStmt <read_stmt_t> (55)
        on left: 30
        on right: 21
    writeStmt <write_stmt_t> (56)
        on left: 31
        on right: 22
    skipStmt <skip_stmt_t> (57)
        on left: 32
        on right: 23
    condition <condition> (58)
        on left: 33 34
        on right: 28 29
    oddCondition <odd_condition> (59)
        on left: 35
        on right: 33
    expr <expr> (60)
        on left: 36 37 38 46 47 48
        on right: 24 31 35 36 39 47 48 55
    relOpCondition <rel_op_condition> (61)
        on left: 39
        on right: 34 36
    relOp <token> (62)
        on left: 40 41 42 43 44 45
        on right: 39
    term <expr> (63)
        on left: 49 50 51
        on right: 46 47 48 50 51
    factor <expr> (64)
        on left: 52 53 54 55
        on right: 49 50 51
    posSign <token> (65)
        on left: 56
        on right: 54


State 0

    0 $accept: . program $end

    "const"  shift, and go to state 1

    $default  reduce using rule 3 (constDecls)

    program     go to state 2
    block       go to state 3
    constDecls  go to state 4
    constDecl   go to state 5


State 1

    5 constDecl: "const" . constDefs

    identsym  shift, and go to state 6

    constDefs  go to state 7
    constDef   go to state 8


State 2

    0 $accept: program . $end

    $end  shift, and go to state 9


State 3

    1 program: block .

    $default  reduce using rule 1 (program)


State 4

    2 block: constDecls . varDecls procDecls stmt

    "var"  shift, and go to state 10

    $default  reduce using rule 9 (varDecls)

    varDecls  go to state 11
    varDecl   go to state 12


State 5

    4 constDecls: constDecl .

    $default  reduce using rule 4 (constDecls)


State 6

    8 constDef: identsym . "=" numbersym

    "="  shift, and go to state 13


State 7

    5 constDecl: "const" constDefs .
    7 constDefs: constDefs . "," constDef

    ","  shift, and go to state 14

    $default  reduce using rule 5 (constDecl)


State 8

    6 constDefs: constDef .

    $default  reduce using rule 6 (constDefs)


State 9

    0 $accept: program $end .

    $default  accept


State 10

   11 varDecl: "var" . idents

    identsym  shift, and go to state 15

    idents  go to state 16


State 11

    2 block: constDecls varDecls . procDecls stmt

    "procedure"  shift, and go to state 17

    $default  reduce using rule 13 (procDecls)

    procDecls  go to state 18
    procDecl   go to state 19


State 12

   10 varDecls: varDecl .

    $default  reduce using rule 10 (varDecls)


State 13

    8 constDef: identsym "=" . numbersym

    numbersym  shift, and go to state 20


State 14

    7 constDefs: constDefs "," . constDef

    identsym  shift, and go to state 6

    constDef  go to state 21


State 15

   12 idents: identsym .

    $default  reduce using rule 12 (idents)


State 16

   11 varDecl: "var" idents .

    $default  reduce using rule 11 (varDecl)


State 17

   15 procDecl: "procedure" . identsym block

    identsym  shift, and go to state 22


State 18

    2 block: constDecls varDecls procDecls . stmt

    identsym  shift, and go to state 23
    "call"    shift, and go to state 24
    "begin"   shift, and go to state 25
    "if"      shift, and go to state 26
    "while"   shift, and go to state 27
    "read"    shift, and go to state 28
    "write"   shift, and go to state 29
    "skip"    shift, and go to state 30

    stmt        go to state 31
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 19

   14 procDecls: procDecl .

    $default  reduce using rule 14 (procDecls)


State 20

    8 constDef: identsym "=" numbersym .

    $default  reduce using rule 8 (constDef)


State 21

    7 constDefs: constDefs "," constDef .

    $default  reduce using rule 7 (constDefs)


State 22

   15 procDecl: "procedure" identsym . block

    "const"  shift, and go to state 1

    $default  reduce using rule 3 (constDecls)

    block       go to state 40
    constDecls  go to state 4
    constDecl   go to state 5


State 23

   24 assignStmt: identsym . ":=" expr

    ":="  shift, and go to state 41


State 24

   26 callStmt: "call" . identsym

    identsym  shift, and go to state 42


State 25

   27 beginStmt: "begin" . stmts "end"

    identsym  shift, and go to state 23
    "call"    shift, and go to state 24
    "begin"   shift, and go to state 25
    "if"      shift, and go to state 26
    "while"   shift, and go to state 27
    "read"    shift, and go to state 28
    "write"   shift, and go to state 29
    "skip"    shift, and go to state 30

    stmt        go to state 43
    assignStmt  go to state 32
    stmts       go to state 44
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 26

   28 ifStmt: "if" . condition "then" stmt "else" stmt "end"

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 47
    "-"        shift, and go to state 48
    "odd"      shift, and go to state 49

    condition       go to state 50
    oddCondition    go to state 51
    expr            go to state 52
    relOpCondition  go to state 53
    term            go to state 54
    factor          go to state 55
    posSign         go to state 56


State 27

   29 whileStmt: "while" . condition "do" stmt "end"

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 47
    "-"        shift, and go to state 48
    "odd"      shift, and go to state 49

    condition       go to state 57
    oddCondition    go to state 51
    expr            go to state 52
    relOpCondition  go to state 53
    term            go to state 54
    factor          go to state 55
    posSign         go to state 56


State 28

   30 readStmt: "read" . identsym

    identsym  shift, and go to state 58


State 29

   31 writeStmt: "write" . expr

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 47
    "-"        shift, and go to state 48

    expr     go to state 59
    term     go to state 54
    factor   go to state 55
    posSign  go to state 56


State 30

   32 skipStmt: "skip" .

    $default  reduce using rule 32 (skipStmt)


State 31

    2 block: constDecls varDecls procDecls stmt .

    $default  reduce using rule 2 (block)


State 32

   16 stmt: assignStmt .

    $default  reduce using rule 16 (stmt)


State 33

   17 stmt: callStmt .

    $default  reduce using rule 17 (stmt)


State 34

   18 stmt: beginStmt .

    $default  reduce using rule 18 (stmt)


State 35

   19 stmt: ifStmt .

    $default  reduce using rule 19 (stmt)


State 36

   20 stmt: whileStmt .

    $default  reduce using rule 20 (stmt)


State 37

   21 stmt: readStmt .

    $default  reduce using rule 21 (stmt)


State 38

   22 stmt: writeStmt .

    $default  reduce using rule 22 (stmt)


State 39

   23 stmt: skipStmt .

    $default  reduce using rule 23 (stmt)


State 40

   15 procDecl: "procedure" identsym block .

    $default  reduce using rule 15 (procDecl)


State 41

   24 assignStmt: identsym ":=" . expr

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 47
    "-"        shift, and go to state 48

    expr     go to state 60
    term     go to state 54
    factor   go to state 55
    posSign  go to state 56


State 42

   26 callStmt: "call" identsym .

    $default  reduce using rule 26 (callStmt)


State 43

   25 stmts: stmt .

    $default  reduce using rule 25 (stmts)


State 44

   27 beginStmt: "begin" stmts . "end"

    "end"  shift, and go to state 61


State 45

   37 expr: identsym .
   52 factor: identsym .

    $end       reduce using rule 37 (expr)
    $end       [reduce using rule 52 (factor)]
    identsym   reduce using rule 37 (expr)
    identsym   [reduce using rule 52 (factor)]
    numbersym  reduce using rule 37 (expr)
    numbersym  [reduce using rule 52 (factor)]
    "+"        reduce using rule 37 (expr)
    "+"        [reduce using rule 52 (factor)]
    "-"        reduce using rule 37 (expr)
    "-"        [reduce using rule 52 (factor)]
    "*"        reduce using rule 37 (expr)
    "*"        [reduce using rule 52 (factor)]
    "/"        reduce using rule 37 (expr)
    "/"        [reduce using rule 52 (factor)]
    "="        reduce using rule 37 (expr)
    "="        [reduce using rule 52 (factor)]
    "call"     reduce using rule 37 (expr)
    "call"     [reduce using rule 52 (factor)]
    "begin"    reduce using rule 37 (expr)
    "begin"    [reduce using rule 52 (factor)]
    "end"      reduce using rule 37 (expr)
    "end"      [reduce using rule 52 (factor)]
    "if"       reduce using rule 37 (expr)
    "if"       [reduce using rule 52 (factor)]
    "then"     reduce using rule 37 (expr)
    "then"     [reduce using rule 52 (factor)]
    "else"     reduce using rule 37 (expr)
    "else"     [reduce using rule 52 (factor)]
    "while"    reduce using rule 37 (expr)
    "while"    [reduce using rule 52 (factor)]
    "do"       reduce using rule 37 (expr)
    "do"       [reduce using rule 52 (factor)]
    "read"     reduce using rule 37 (expr)
    "read"     [reduce using rule 52 (factor)]
    "write"    reduce using rule 37 (expr)
    "write"    [reduce using rule 52 (factor)]
    "skip"     reduce using rule 37 (expr)
    "skip"     [reduce using rule 52 (factor)]
    "<>"       reduce using rule 37 (expr)
    "<>"       [reduce using rule 52 (factor)]
    "<"        reduce using rule 37 (expr)
    "<"        [reduce using rule 52 (factor)]
    "<="       reduce using rule 37 (expr)
    "<="       [reduce using rule 52 (factor)]
    ">"        reduce using rule 37 (expr)
    ">"        [reduce using rule 52 (factor)]
    ">="       reduce using rule 37 (expr)
    ">="       [reduce using rule 52 (factor)]
    $default   reduce using rule 37 (expr)


State 46

   38 expr: numbersym .

    $default  reduce using rule 38 (expr)


State 47

   56 posSign: "+" .

    $default  reduce using rule 56 (posSign)


State 48

   53 factor: "-" . numbersym

    numbersym  shift, and go to state 62


State 49

   35 oddCondition: "odd" . expr

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 47
    "-"        shift, and go to state 48

    expr     go to state 63
    term     go to state 54
    factor   go to state 55
    posSign  go to state 56


State 50

   28 ifStmt: "if" condition . "then" stmt "else" stmt "end"

    "then"  shift, and go to state 64


State 51

   33 condition: oddCondition .

    $default  reduce using rule 33 (condition)


State 52

   36 expr: expr . relOpCondition expr
   39 relOpCondition: expr . relOp expr
   47 expr: expr . "+" term
   48     | expr . "-" term
   55 factor: expr .

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 65
    "-"        shift, and go to state 66
    "="        shift, and go to state 67
    "<>"       shift, and go to state 68
    "<"        shift, and go to state 69
    "<="       shift, and go to state 70
    ">"        shift, and go to state 71
    ">="       shift, and go to state 72

    identsym   [reduce using rule 55 (factor)]
    numbersym  [reduce using rule 55 (factor)]
    "+"        [reduce using rule 55 (factor)]
    "-"        [reduce using rule 55 (factor)]
    "="        [reduce using rule 55 (factor)]
    "<>"       [reduce using rule 55 (factor)]
    "<"        [reduce using rule 55 (factor)]
    "<="       [reduce using rule 55 (factor)]
    ">"        [reduce using rule 55 (factor)]
    ">="       [reduce using rule 55 (factor)]
    $default   reduce using rule 55 (factor)

    expr            go to state 52
    relOpCondition  go to state 73
    relOp           go to state 74
    term            go to state 54
    factor          go to state 55
    posSign         go to state 56


State 53

   34 condition: relOpCondition .

    $default  reduce using rule 34 (condition)


State 54

   46 expr: term .
   50 term: term . "*" factor
   51     | term . "/" factor

    "*"  shift, and go to state 75
    "/"  shift, and go to state 76

    "*"       [reduce using rule 46 (expr)]
    "/"       [reduce using rule 46 (expr)]
    $default  reduce using rule 46 (expr)


State 55

   49 term: factor .

    $default  reduce using rule 49 (term)


State 56

   54 factor: posSign . numbersym

    numbersym  shift, and go to state 77


State 57

   29 whileStmt: "while" condition . "do" stmt "end"

    "do"  shift, and go to state 78


State 58

   30 readStmt: "read" identsym .

    $default  reduce using rule 30 (readStmt)


State 59

   31 writeStmt: "write" expr .
   36 expr: expr . relOpCondition expr
   47     | expr . "+" term
   48     | expr . "-" term
   55 factor: expr .

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 65
    "-"        shift, and go to state 66

    $end       reduce using rule 31 (writeStmt)
    $end       [reduce using rule 55 (factor)]
    identsym   [reduce using rule 31 (writeStmt)]
    identsym   [reduce using rule 55 (factor)]
    numbersym  [reduce using rule 55 (factor)]
    "+"        [reduce using rule 55 (factor)]
    "-"        [reduce using rule 55 (factor)]
    "*"        reduce using rule 55 (factor)
    "/"        reduce using rule 55 (factor)
    "call"     reduce using rule 31 (writeStmt)
    "call"     [reduce using rule 55 (factor)]
    "begin"    reduce using rule 31 (writeStmt)
    "begin"    [reduce using rule 55 (factor)]
    "end"      reduce using rule 31 (writeStmt)
    "end"      [reduce using rule 55 (factor)]
    "if"       reduce using rule 31 (writeStmt)
    "if"       [reduce using rule 55 (factor)]
    "else"     reduce using rule 31 (writeStmt)
    "else"     [reduce using rule 55 (factor)]
    "while"    reduce using rule 31 (writeStmt)
    "while"    [reduce using rule 55 (factor)]
    "read"     reduce using rule 31 (writeStmt)
    "read"     [reduce using rule 55 (factor)]
    "write"    reduce using rule 31 (writeStmt)
    "write"    [reduce using rule 55 (factor)]
    "skip"     reduce using rule 31 (writeStmt)
    "skip"     [reduce using rule 55 (factor)]
    $default   reduce using rule 31 (writeStmt)

    expr            go to state 52
    relOpCondition  go to state 73
    term            go to state 54
    factor          go to state 55
    posSign         go to state 56


State 60

   24 assignStmt: identsym ":=" expr .
   36 expr: expr . relOpCondition expr
   47     | expr . "+" term
   48     | expr . "-" term
   55 factor: expr .

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 65
    "-"        shift, and go to state 66

    $end       reduce using rule 24 (assignStmt)
    $end       [reduce using rule 55 (factor)]
    identsym   [reduce using rule 24 (assignStmt)]
    identsym   [reduce using rule 55 (factor)]
    numbersym  [reduce using rule 55 (factor)]
    "+"        [reduce using rule 55 (factor)]
    "-"        [reduce using rule 55 (factor)]
    "*"        reduce using rule 55 (factor)
    "/"        reduce using rule 55 (factor)
    "call"     reduce using rule 24 (assignStmt)
    "call"     [reduce using rule 55 (factor)]
    "begin"    reduce using rule 24 (assignStmt)
    "begin"    [reduce using rule 55 (factor)]
    "end"      reduce using rule 24 (assignStmt)
    "end"      [reduce using rule 55 (factor)]
    "if"       reduce using rule 24 (assignStmt)
    "if"       [reduce using rule 55 (factor)]
    "else"     reduce using rule 24 (assignStmt)
    "else"     [reduce using rule 55 (factor)]
    "while"    reduce using rule 24 (assignStmt)
    "while"    [reduce using rule 55 (factor)]
    "read"     reduce using rule 24 (assignStmt)
    "read"     [reduce using rule 55 (factor)]
    "write"    reduce using rule 24 (assignStmt)
    "write"    [reduce using rule 55 (factor)]
    "skip"     reduce using rule 24 (assignStmt)
    "skip"     [reduce using rule 55 (factor)]
    $default   reduce using rule 24 (assignStmt)

    expr            go to state 52
    relOpCondition  go to state 73
    term            go to state 54
    factor          go to state 55
    posSign         go to state 56


State 61

   27 beginStmt: "begin" stmts "end" .

    $default  reduce using rule 27 (beginStmt)


State 62

   53 factor: "-" numbersym .

    $default  reduce using rule 53 (factor)


State 63

   35 oddCondition: "odd" expr .
   36 expr: expr . relOpCondition expr
   47     | expr . "+" term
   48     | expr . "-" term
   55 factor: expr .

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 65
    "-"        shift, and go to state 66

    identsym   [reduce using rule 55 (factor)]
    numbersym  [reduce using rule 55 (factor)]
    "+"        [reduce using rule 55 (factor)]
    "-"        [reduce using rule 55 (factor)]
    "*"        reduce using rule 55 (factor)
    "/"        reduce using rule 55 (factor)
    "then"     reduce using rule 35 (oddCondition)
    "then"     [reduce using rule 55 (factor)]
    "do"       reduce using rule 35 (oddCondition)
    "do"       [reduce using rule 55 (factor)]
    $default   reduce using rule 35 (oddCondition)

    expr            go to state 52
    relOpCondition  go to state 73
    term            go to state 54
    factor          go to state 55
    posSign         go to state 56


State 64

   28 ifStmt: "if" condition "then" . stmt "else" stmt "end"

    identsym  shift, and go to state 23
    "call"    shift, and go to state 24
    "begin"   shift, and go to state 25
    "if"      shift, and go to state 26
    "while"   shift, and go to state 27
    "read"    shift, and go to state 28
    "write"   shift, and go to state 29
    "skip"    shift, and go to state 30

    stmt        go to state 79
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 65

   47 expr: expr "+" . term
   56 posSign: "+" .

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 47
    "-"        shift, and go to state 48

    numbersym  [reduce using rule 56 (posSign)]

    expr     go to state 80
    term     go to state 81
    factor   go to state 55
    posSign  go to state 56


State 66

   48 expr: expr "-" . term
   53 factor: "-" . numbersym

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 82
    "+"        shift, and go to state 47
    "-"        shift, and go to state 48

    expr     go to state 80
    term     go to state 83
    factor   go to state 55
    posSign  go to state 56


State 67

   40 relOp: "=" .

    $default  reduce using rule 40 (relOp)


State 68

   41 relOp: "<>" .

    $default  reduce using rule 41 (relOp)


State 69

   42 relOp: "<" .

    $default  reduce using rule 42 (relOp)


State 70

   43 relOp: "<=" .

    $default  reduce using rule 43 (relOp)


State 71

   44 relOp: ">" .

    $default  reduce using rule 44 (relOp)


State 72

   45 relOp: ">=" .

    $default  reduce using rule 45 (relOp)


State 73

   36 expr: expr relOpCondition . expr

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 47
    "-"        shift, and go to state 48

    expr     go to state 84
    term     go to state 54
    factor   go to state 55
    posSign  go to state 56


State 74

   39 relOpCondition: expr relOp . expr

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 47
    "-"        shift, and go to state 48

    expr     go to state 85
    term     go to state 54
    factor   go to state 55
    posSign  go to state 56


State 75

   50 term: term "*" . factor

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 47
    "-"        shift, and go to state 48

    expr     go to state 80
    term     go to state 54
    factor   go to state 86
    posSign  go to state 56


State 76

   51 term: term "/" . factor

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 47
    "-"        shift, and go to state 48

    expr     go to state 80
    term     go to state 54
    factor   go to state 87
    posSign  go to state 56


State 77

   54 factor: posSign numbersym .

    $default  reduce using rule 54 (factor)


State 78

   29 whileStmt: "while" condition "do" . stmt "end"

    identsym  shift, and go to state 23
    "call"    shift, and go to state 24
    "begin"   shift, and go to state 25
    "if"      shift, and go to state 26
    "while"   shift, and go to state 27
    "read"    shift, and go to state 28
    "write"   shift, and go to state 29
    "skip"    shift, and go to state 30

    stmt        go to state 88
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 79

   28 ifStmt: "if" condition "then" stmt . "else" stmt "end"

    "else"  shift, and go to state 89


State 80

   36 expr: expr . relOpCondition expr
   47     | expr . "+" term
   48     | expr . "-" term
   55 factor: expr .

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 65
    "-"        shift, and go to state 66

    identsym   [reduce using rule 55 (factor)]
    numbersym  [reduce using rule 55 (factor)]
    "+"        [reduce using rule 55 (factor)]
    "-"        [reduce using rule 55 (factor)]
    $default   reduce using rule 55 (factor)

    expr            go to state 52
    relOpCondition  go to state 73
    term            go to state 54
    factor          go to state 55
    posSign         go to state 56


State 81

   46 expr: term .
   47     | expr "+" term .
   50 term: term . "*" factor
   51     | term . "/" factor

    "*"  shift, and go to state 75
    "/"  shift, and go to state 76

    $end       reduce using rule 46 (expr)
    $end       [reduce using rule 47 (expr)]
    identsym   reduce using rule 46 (expr)
    identsym   [reduce using rule 47 (expr)]
    numbersym  reduce using rule 46 (expr)
    numbersym  [reduce using rule 47 (expr)]
    "+"        reduce using rule 46 (expr)
    "+"        [reduce using rule 47 (expr)]
    "-"        reduce using rule 46 (expr)
    "-"        [reduce using rule 47 (expr)]
    "*"        [reduce using rule 46 (expr)]
    "*"        [reduce using rule 47 (expr)]
    "/"        [reduce using rule 46 (expr)]
    "/"        [reduce using rule 47 (expr)]
    "="        reduce using rule 46 (expr)
    "="        [reduce using rule 47 (expr)]
    "call"     reduce using rule 46 (expr)
    "call"     [reduce using rule 47 (expr)]
    "begin"    reduce using rule 46 (expr)
    "begin"    [reduce using rule 47 (expr)]
    "end"      reduce using rule 46 (expr)
    "end"      [reduce using rule 47 (expr)]
    "if"       reduce using rule 46 (expr)
    "if"       [reduce using rule 47 (expr)]
    "then"     reduce using rule 46 (expr)
    "then"     [reduce using rule 47 (expr)]
    "else"     reduce using rule 46 (expr)
    "else"     [reduce using rule 47 (expr)]
    "while"    reduce using rule 46 (expr)
    "while"    [reduce using rule 47 (expr)]
    "do"       reduce using rule 46 (expr)
    "do"       [reduce using rule 47 (expr)]
    "read"     reduce using rule 46 (expr)
    "read"     [reduce using rule 47 (expr)]
    "write"    reduce using rule 46 (expr)
    "write"    [reduce using rule 47 (expr)]
    "skip"     reduce using rule 46 (expr)
    "skip"     [reduce using rule 47 (expr)]
    "<>"       reduce using rule 46 (expr)
    "<>"       [reduce using rule 47 (expr)]
    "<"        reduce using rule 46 (expr)
    "<"        [reduce using rule 47 (expr)]
    "<="       reduce using rule 46 (expr)
    "<="       [reduce using rule 47 (expr)]
    ">"        reduce using rule 46 (expr)
    ">"        [reduce using rule 47 (expr)]
    ">="       reduce using rule 46 (expr)
    ">="       [reduce using rule 47 (expr)]
    $default   reduce using rule 46 (expr)


State 82

   38 expr: numbersym .
   53 factor: "-" numbersym .

    identsym   reduce using rule 38 (expr)
    identsym   [reduce using rule 53 (factor)]
    numbersym  reduce using rule 38 (expr)
    numbersym  [reduce using rule 53 (factor)]
    "+"        reduce using rule 38 (expr)
    "+"        [reduce using rule 53 (factor)]
    "-"        reduce using rule 38 (expr)
    "-"        [reduce using rule 53 (factor)]
    "*"        reduce using rule 38 (expr)
    "*"        [reduce using rule 53 (factor)]
    "/"        reduce using rule 38 (expr)
    "/"        [reduce using rule 53 (factor)]
    "="        reduce using rule 38 (expr)
    "="        [reduce using rule 53 (factor)]
    "<>"       reduce using rule 38 (expr)
    "<>"       [reduce using rule 53 (factor)]
    "<"        reduce using rule 38 (expr)
    "<"        [reduce using rule 53 (factor)]
    "<="       reduce using rule 38 (expr)
    "<="       [reduce using rule 53 (factor)]
    ">"        reduce using rule 38 (expr)
    ">"        [reduce using rule 53 (factor)]
    ">="       reduce using rule 38 (expr)
    ">="       [reduce using rule 53 (factor)]
    $default   reduce using rule 38 (expr)


State 83

   46 expr: term .
   48     | expr "-" term .
   50 term: term . "*" factor
   51     | term . "/" factor

    "*"  shift, and go to state 75
    "/"  shift, and go to state 76

    $end       reduce using rule 46 (expr)
    $end       [reduce using rule 48 (expr)]
    identsym   reduce using rule 46 (expr)
    identsym   [reduce using rule 48 (expr)]
    numbersym  reduce using rule 46 (expr)
    numbersym  [reduce using rule 48 (expr)]
    "+"        reduce using rule 46 (expr)
    "+"        [reduce using rule 48 (expr)]
    "-"        reduce using rule 46 (expr)
    "-"        [reduce using rule 48 (expr)]
    "*"        [reduce using rule 46 (expr)]
    "*"        [reduce using rule 48 (expr)]
    "/"        [reduce using rule 46 (expr)]
    "/"        [reduce using rule 48 (expr)]
    "="        reduce using rule 46 (expr)
    "="        [reduce using rule 48 (expr)]
    "call"     reduce using rule 46 (expr)
    "call"     [reduce using rule 48 (expr)]
    "begin"    reduce using rule 46 (expr)
    "begin"    [reduce using rule 48 (expr)]
    "end"      reduce using rule 46 (expr)
    "end"      [reduce using rule 48 (expr)]
    "if"       reduce using rule 46 (expr)
    "if"       [reduce using rule 48 (expr)]
    "then"     reduce using rule 46 (expr)
    "then"     [reduce using rule 48 (expr)]
    "else"     reduce using rule 46 (expr)
    "else"     [reduce using rule 48 (expr)]
    "while"    reduce using rule 46 (expr)
    "while"    [reduce using rule 48 (expr)]
    "do"       reduce using rule 46 (expr)
    "do"       [reduce using rule 48 (expr)]
    "read"     reduce using rule 46 (expr)
    "read"     [reduce using rule 48 (expr)]
    "write"    reduce using rule 46 (expr)
    "write"    [reduce using rule 48 (expr)]
    "skip"     reduce using rule 46 (expr)
    "skip"     [reduce using rule 48 (expr)]
    "<>"       reduce using rule 46 (expr)
    "<>"       [reduce using rule 48 (expr)]
    "<"        reduce using rule 46 (expr)
    "<"        [reduce using rule 48 (expr)]
    "<="       reduce using rule 46 (expr)
    "<="       [reduce using rule 48 (expr)]
    ">"        reduce using rule 46 (expr)
    ">"        [reduce using rule 48 (expr)]
    ">="       reduce using rule 46 (expr)
    ">="       [reduce using rule 48 (expr)]
    $default   reduce using rule 46 (expr)


State 84

   36 expr: expr . relOpCondition expr
   36     | expr relOpCondition expr .
   47     | expr . "+" term
   48     | expr . "-" term
   55 factor: expr .

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 65
    "-"        shift, and go to state 66

    $end       reduce using rule 36 (expr)
    $end       [reduce using rule 55 (factor)]
    identsym   [reduce using rule 36 (expr)]
    identsym   [reduce using rule 55 (factor)]
    numbersym  [reduce using rule 36 (expr)]
    numbersym  [reduce using rule 55 (factor)]
    "+"        [reduce using rule 36 (expr)]
    "+"        [reduce using rule 55 (factor)]
    "-"        [reduce using rule 36 (expr)]
    "-"        [reduce using rule 55 (factor)]
    "*"        reduce using rule 36 (expr)
    "*"        [reduce using rule 55 (factor)]
    "/"        reduce using rule 36 (expr)
    "/"        [reduce using rule 55 (factor)]
    "="        reduce using rule 36 (expr)
    "="        [reduce using rule 55 (factor)]
    "call"     reduce using rule 36 (expr)
    "call"     [reduce using rule 55 (factor)]
    "begin"    reduce using rule 36 (expr)
    "begin"    [reduce using rule 55 (factor)]
    "end"      reduce using rule 36 (expr)
    "end"      [reduce using rule 55 (factor)]
    "if"       reduce using rule 36 (expr)
    "if"       [reduce using rule 55 (factor)]
    "then"     reduce using rule 36 (expr)
    "then"     [reduce using rule 55 (factor)]
    "else"     reduce using rule 36 (expr)
    "else"     [reduce using rule 55 (factor)]
    "while"    reduce using rule 36 (expr)
    "while"    [reduce using rule 55 (factor)]
    "do"       reduce using rule 36 (expr)
    "do"       [reduce using rule 55 (factor)]
    "read"     reduce using rule 36 (expr)
    "read"     [reduce using rule 55 (factor)]
    "write"    reduce using rule 36 (expr)
    "write"    [reduce using rule 55 (factor)]
    "skip"     reduce using rule 36 (expr)
    "skip"     [reduce using rule 55 (factor)]
    "<>"       reduce using rule 36 (expr)
    "<>"       [reduce using rule 55 (factor)]
    "<"        reduce using rule 36 (expr)
    "<"        [reduce using rule 55 (factor)]
    "<="       reduce using rule 36 (expr)
    "<="       [reduce using rule 55 (factor)]
    ">"        reduce using rule 36 (expr)
    ">"        [reduce using rule 55 (factor)]
    ">="       reduce using rule 36 (expr)
    ">="       [reduce using rule 55 (factor)]
    $default   reduce using rule 36 (expr)

    expr            go to state 52
    relOpCondition  go to state 73
    term            go to state 54
    factor          go to state 55
    posSign         go to state 56


State 85

   36 expr: expr . relOpCondition expr
   39 relOpCondition: expr relOp expr .
   47 expr: expr . "+" term
   48     | expr . "-" term
   55 factor: expr .

    identsym   shift, and go to state 45
    numbersym  shift, and go to state 46
    "+"        shift, and go to state 65
    "-"        shift, and go to state 66

    identsym   [reduce using rule 39 (relOpCondition)]
    identsym   [reduce using rule 55 (factor)]
    numbersym  [reduce using rule 39 (relOpCondition)]
    numbersym  [reduce using rule 55 (factor)]
    "+"        [reduce using rule 39 (relOpCondition)]
    "+"        [reduce using rule 55 (factor)]
    "-"        [reduce using rule 39 (relOpCondition)]
    "-"        [reduce using rule 55 (factor)]
    "*"        reduce using rule 55 (factor)
    "/"        reduce using rule 55 (factor)
    "then"     reduce using rule 39 (relOpCondition)
    "then"     [reduce using rule 55 (factor)]
    "do"       reduce using rule 39 (relOpCondition)
    "do"       [reduce using rule 55 (factor)]
    $default   reduce using rule 39 (relOpCondition)

    expr            go to state 52
    relOpCondition  go to state 73
    term            go to state 54
    factor          go to state 55
    posSign         go to state 56


State 86

   49 term: factor .
   50     | term "*" factor .

    $end       reduce using rule 49 (term)
    $end       [reduce using rule 50 (term)]
    identsym   reduce using rule 49 (term)
    identsym   [reduce using rule 50 (term)]
    numbersym  reduce using rule 49 (term)
    numbersym  [reduce using rule 50 (term)]
    "+"        reduce using rule 49 (term)
    "+"        [reduce using rule 50 (term)]
    "-"        reduce using rule 49 (term)
    "-"        [reduce using rule 50 (term)]
    "*"        reduce using rule 49 (term)
    "*"        [reduce using rule 50 (term)]
    "/"        reduce using rule 49 (term)
    "/"        [reduce using rule 50 (term)]
    "="        reduce using rule 49 (term)
    "="        [reduce using rule 50 (term)]
    "call"     reduce using rule 49 (term)
    "call"     [reduce using rule 50 (term)]
    "begin"    reduce using rule 49 (term)
    "begin"    [reduce using rule 50 (term)]
    "end"      reduce using rule 49 (term)
    "end"      [reduce using rule 50 (term)]
    "if"       reduce using rule 49 (term)
    "if"       [reduce using rule 50 (term)]
    "then"     reduce using rule 49 (term)
    "then"     [reduce using rule 50 (term)]
    "else"     reduce using rule 49 (term)
    "else"     [reduce using rule 50 (term)]
    "while"    reduce using rule 49 (term)
    "while"    [reduce using rule 50 (term)]
    "do"       reduce using rule 49 (term)
    "do"       [reduce using rule 50 (term)]
    "read"     reduce using rule 49 (term)
    "read"     [reduce using rule 50 (term)]
    "write"    reduce using rule 49 (term)
    "write"    [reduce using rule 50 (term)]
    "skip"     reduce using rule 49 (term)
    "skip"     [reduce using rule 50 (term)]
    "<>"       reduce using rule 49 (term)
    "<>"       [reduce using rule 50 (term)]
    "<"        reduce using rule 49 (term)
    "<"        [reduce using rule 50 (term)]
    "<="       reduce using rule 49 (term)
    "<="       [reduce using rule 50 (term)]
    ">"        reduce using rule 49 (term)
    ">"        [reduce using rule 50 (term)]
    ">="       reduce using rule 49 (term)
    ">="       [reduce using rule 50 (term)]
    $default   reduce using rule 49 (term)


State 87

   49 term: factor .
   51     | term "/" factor .

    $end       reduce using rule 49 (term)
    $end       [reduce using rule 51 (term)]
    identsym   reduce using rule 49 (term)
    identsym   [reduce using rule 51 (term)]
    numbersym  reduce using rule 49 (term)
    numbersym  [reduce using rule 51 (term)]
    "+"        reduce using rule 49 (term)
    "+"        [reduce using rule 51 (term)]
    "-"        reduce using rule 49 (term)
    "-"        [reduce using rule 51 (term)]
    "*"        reduce using rule 49 (term)
    "*"        [reduce using rule 51 (term)]
    "/"        reduce using rule 49 (term)
    "/"        [reduce using rule 51 (term)]
    "="        reduce using rule 49 (term)
    "="        [reduce using rule 51 (term)]
    "call"     reduce using rule 49 (term)
    "call"     [reduce using rule 51 (term)]
    "begin"    reduce using rule 49 (term)
    "begin"    [reduce using rule 51 (term)]
    "end"      reduce using rule 49 (term)
    "end"      [reduce using rule 51 (term)]
    "if"       reduce using rule 49 (term)
    "if"       [reduce using rule 51 (term)]
    "then"     reduce using rule 49 (term)
    "then"     [reduce using rule 51 (term)]
    "else"     reduce using rule 49 (term)
    "else"     [reduce using rule 51 (term)]
    "while"    reduce using rule 49 (term)
    "while"    [reduce using rule 51 (term)]
    "do"       reduce using rule 49 (term)
    "do"       [reduce using rule 51 (term)]
    "read"     reduce using rule 49 (term)
    "read"     [reduce using rule 51 (term)]
    "write"    reduce using rule 49 (term)
    "write"    [reduce using rule 51 (term)]
    "skip"     reduce using rule 49 (term)
    "skip"     [reduce using rule 51 (term)]
    "<>"       reduce using rule 49 (term)
    "<>"       [reduce using rule 51 (term)]
    "<"        reduce using rule 49 (term)
    "<"        [reduce using rule 51 (term)]
    "<="       reduce using rule 49 (term)
    "<="       [reduce using rule 51 (term)]
    ">"        reduce using rule 49 (term)
    ">"        [reduce using rule 51 (term)]
    ">="       reduce using rule 49 (term)
    ">="       [reduce using rule 51 (term)]
    $default   reduce using rule 49 (term)


State 88

   29 whileStmt: "while" condition "do" stmt . "end"

    "end"  shift, and go to state 90


State 89

   28 ifStmt: "if" condition "then" stmt "else" . stmt "end"

    identsym  shift, and go to state 23
    "call"    shift, and go to state 24
    "begin"   shift, and go to state 25
    "if"      shift, and go to state 26
    "while"   shift, and go to state 27
    "read"    shift, and go to state 28
    "write"   shift, and go to state 29
    "skip"    shift, and go to state 30

    stmt        go to state 91
    assignStmt  go to state 32
    callStmt    go to state 33
    beginStmt   go to state 34
    ifStmt      go to state 35
    whileStmt   go to state 36
    readStmt    go to state 37
    writeStmt   go to state 38
    skipStmt    go to state 39


State 90

   29 whileStmt: "while" condition "do" stmt "end" .

    $default  reduce using rule 29 (whileStmt)


State 91

   28 ifStmt: "if" condition "then" stmt "else" stmt . "end"

    "end"  shift, and go to state 92


State 92

   28 ifStmt: "if" condition "then" stmt "else" stmt "end" .

    $default  reduce using rule 28 (ifStmt)
