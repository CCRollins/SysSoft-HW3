Nonterminals useless in grammar

    procDecl
    ifStmt
    posSign


Terminals unused in grammar

    "+"
    "-"
    "."
    "procedure"
    "end"
    "if"
    "then"
    "else"


Rules useless in grammar

   51 procDecls: procDecls procDecl

   52 procDecl: procDecl identsym block

   53 stmt: ifStmt

   54 ifStmt: ifStmt condition "then" "else"

   55 posSign: "+"


Rules useless in parser due to conflicts

   29 writeStmt: "write" expr ";"


State 42 conflicts: 7 shift/reduce
State 51 conflicts: 6 shift/reduce
State 73 conflicts: 8 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: block

    2 block: constDecls varDecls procDecls stmt

    3 constDecls: empty
    4           | constDecls constDecl

    5 constDef: "const" identsym ":=" numbersym

    6 constDecl: "const" constDefs

    7 constDefs: constDef
    8          | constDefs "," constDef

    9 varDecls: empty
   10         | varDecls varDecl

   11 varDecl: "var" idents

   12 idents: identsym
   13       | idents "," identsym

   14 procDecls: empty

   15 stmt: assignStmt
   16     | callStmt
   17     | beginStmt
   18     | whileStmt
   19     | readStmt
   20     | writeStmt
   21     | skipStmt

   22 assignStmt: identsym "=" expr ";"

   23 callStmt: "call" identsym

   24 beginStmt: "begin" stmts

   25 whileStmt: "while" condition "do" stmt

   26 readStmt: "read" identsym ";"

   27 writeStmt: "write" expr ";"

   28 skipStmt: "skip"

   29 writeStmt: "write" expr ";"

   30 stmts: stmt
   31      | stmts stmt

   32 condition: oddCondition
   33          | relOpCondition

   34 oddCondition: "odd" expr

   35 relOpCondition: expr relOp expr

   36 relOp: "="
   37      | "<>"
   38      | "<"
   39      | "<="
   40      | ">"
   41      | ">="

   42 expr: term
   43     | term relOp term

   44 term: factor
   45     | term "*" factor
   46     | term "/" factor

   47 factor: identsym
   48       | numbersym
   49       | "(" expr ")"

   50 empty: ε


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 5 12 13 22 23 26 47
    numbersym <number> (259) 5 48
    "+" <token> (260)
    "-" <token> (261)
    "*" <token> (262) 45
    "/" <token> (263) 46
    "." <token> (264)
    ";" <token> (265) 22 26 27 29
    "=" <token> (266) 22 36
    "," <token> (267) 8 13
    ":=" <token> (268) 5
    "const" <token> (269) 5 6
    "var" <token> (270) 11
    "procedure" <token> (271)
    "call" <token> (272) 23
    "begin" <token> (273) 24
    "end" <token> (274)
    "if" <token> (275)
    "then" <token> (276)
    "else" <token> (277)
    "while" <token> (278) 25
    "do" <token> (279) 25
    "read" <token> (280) 26
    "write" <token> (281) 27 29
    "skip" <token> (282) 28
    "odd" <token> (283) 34
    "<>" <token> (284) 37
    "<" <token> (285) 38
    "<=" <token> (286) 39
    ">" <token> (287) 40
    ">=" <token> (288) 41
    "(" <token> (289) 49
    ")" <token> (290) 49


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program <block> (37)
        on left: 1
        on right: 0
    block <block> (38)
        on left: 2
        on right: 1
    constDecls <const_decls> (39)
        on left: 3 4
        on right: 2 4
    constDef <const_def> (40)
        on left: 5
        on right: 7 8
    constDecl <const_decl> (41)
        on left: 6
        on right: 4
    constDefs <const_defs> (42)
        on left: 7 8
        on right: 6 8
    varDecls <var_decls> (43)
        on left: 9 10
        on right: 2 10
    varDecl <var_decl> (44)
        on left: 11
        on right: 10
    idents <idents> (45)
        on left: 12 13
        on right: 11 13
    procDecls <proc_decls> (46)
        on left: 14
        on right: 2
    stmt <stmt> (47)
        on left: 15 16 17 18 19 20 21
        on right: 2 25 30 31
    assignStmt <assign_stmt> (48)
        on left: 22
        on right: 15
    callStmt <call_stmt> (49)
        on left: 23
        on right: 16
    beginStmt <begin_stmt> (50)
        on left: 24
        on right: 17
    whileStmt <while_stmt> (51)
        on left: 25
        on right: 18
    readStmt <read_stmt> (52)
        on left: 26
        on right: 19
    writeStmt <write_stmt> (53)
        on left: 27 29
        on right: 20
    skipStmt <skip_stmt> (54)
        on left: 28
        on right: 21
    stmts <stmts> (55)
        on left: 30 31
        on right: 24 31
    condition <condition> (56)
        on left: 32 33
        on right: 25
    oddCondition <odd_condition> (57)
        on left: 34
        on right: 32
    relOpCondition <rel_op_condition> (58)
        on left: 35
        on right: 33
    relOp <token> (59)
        on left: 36 37 38 39 40 41
        on right: 35 43
    expr <expr> (60)
        on left: 42 43
        on right: 22 27 29 34 35 49
    term <expr> (61)
        on left: 44 45 46
        on right: 42 43 45 46
    factor <expr> (62)
        on left: 47 48 49
        on right: 44 45 46
    empty <empty> (63)
        on left: 50
        on right: 3 9 14


State 0

    0 $accept: • program $end

    $default  reduce using rule 50 (empty)

    program     go to state 1
    block       go to state 2
    constDecls  go to state 3
    empty       go to state 4


State 1

    0 $accept: program • $end

    $end  shift, and go to state 5


State 2

    1 program: block •

    $default  reduce using rule 1 (program)


State 3

    2 block: constDecls • varDecls procDecls stmt
    4 constDecls: constDecls • constDecl

    "const"  shift, and go to state 6

    $default  reduce using rule 50 (empty)

    constDecl  go to state 7
    varDecls   go to state 8
    empty      go to state 9


State 4

    3 constDecls: empty •

    $default  reduce using rule 3 (constDecls)


State 5

    0 $accept: program $end •

    $default  accept


State 6

    6 constDecl: "const" • constDefs

    "const"  shift, and go to state 10

    constDef   go to state 11
    constDefs  go to state 12


State 7

    4 constDecls: constDecls constDecl •

    $default  reduce using rule 4 (constDecls)


State 8

    2 block: constDecls varDecls • procDecls stmt
   10 varDecls: varDecls • varDecl

    "var"  shift, and go to state 13

    $default  reduce using rule 50 (empty)

    varDecl    go to state 14
    procDecls  go to state 15
    empty      go to state 16


State 9

    9 varDecls: empty •

    $default  reduce using rule 9 (varDecls)


State 10

    5 constDef: "const" • identsym ":=" numbersym

    identsym  shift, and go to state 17


State 11

    7 constDefs: constDef •

    $default  reduce using rule 7 (constDefs)


State 12

    6 constDecl: "const" constDefs •
    8 constDefs: constDefs • "," constDef

    ","  shift, and go to state 18

    $default  reduce using rule 6 (constDecl)


State 13

   11 varDecl: "var" • idents

    identsym  shift, and go to state 19

    idents  go to state 20


State 14

   10 varDecls: varDecls varDecl •

    $default  reduce using rule 10 (varDecls)


State 15

    2 block: constDecls varDecls procDecls • stmt

    identsym  shift, and go to state 21
    "call"    shift, and go to state 22
    "begin"   shift, and go to state 23
    "while"   shift, and go to state 24
    "read"    shift, and go to state 25
    "write"   shift, and go to state 26
    "skip"    shift, and go to state 27

    stmt        go to state 28
    assignStmt  go to state 29
    callStmt    go to state 30
    beginStmt   go to state 31
    whileStmt   go to state 32
    readStmt    go to state 33
    writeStmt   go to state 34
    skipStmt    go to state 35


State 16

   14 procDecls: empty •

    $default  reduce using rule 14 (procDecls)


State 17

    5 constDef: "const" identsym • ":=" numbersym

    ":="  shift, and go to state 36


State 18

    8 constDefs: constDefs "," • constDef

    "const"  shift, and go to state 10

    constDef  go to state 37


State 19

   12 idents: identsym •

    $default  reduce using rule 12 (idents)


State 20

   11 varDecl: "var" idents •
   13 idents: idents • "," identsym

    ","  shift, and go to state 38

    $default  reduce using rule 11 (varDecl)


State 21

   22 assignStmt: identsym • "=" expr ";"

    "="  shift, and go to state 39


State 22

   23 callStmt: "call" • identsym

    identsym  shift, and go to state 40


State 23

   24 beginStmt: "begin" • stmts

    identsym  shift, and go to state 21
    "call"    shift, and go to state 22
    "begin"   shift, and go to state 23
    "while"   shift, and go to state 24
    "read"    shift, and go to state 25
    "write"   shift, and go to state 26
    "skip"    shift, and go to state 27

    stmt        go to state 41
    assignStmt  go to state 29
    callStmt    go to state 30
    beginStmt   go to state 31
    whileStmt   go to state 32
    readStmt    go to state 33
    writeStmt   go to state 34
    skipStmt    go to state 35
    stmts       go to state 42


State 24

   25 whileStmt: "while" • condition "do" stmt

    identsym   shift, and go to state 43
    numbersym  shift, and go to state 44
    "odd"      shift, and go to state 45
    "("        shift, and go to state 46

    condition       go to state 47
    oddCondition    go to state 48
    relOpCondition  go to state 49
    expr            go to state 50
    term            go to state 51
    factor          go to state 52


State 25

   26 readStmt: "read" • identsym ";"

    identsym  shift, and go to state 53


State 26

   27 writeStmt: "write" • expr ";"
   29          | "write" • expr ";"

    identsym   shift, and go to state 43
    numbersym  shift, and go to state 44
    "("        shift, and go to state 46

    expr    go to state 54
    term    go to state 51
    factor  go to state 52


State 27

   28 skipStmt: "skip" •

    $default  reduce using rule 28 (skipStmt)


State 28

    2 block: constDecls varDecls procDecls stmt •

    $default  reduce using rule 2 (block)


State 29

   15 stmt: assignStmt •

    $default  reduce using rule 15 (stmt)


State 30

   16 stmt: callStmt •

    $default  reduce using rule 16 (stmt)


State 31

   17 stmt: beginStmt •

    $default  reduce using rule 17 (stmt)


State 32

   18 stmt: whileStmt •

    $default  reduce using rule 18 (stmt)


State 33

   19 stmt: readStmt •

    $default  reduce using rule 19 (stmt)


State 34

   20 stmt: writeStmt •

    $default  reduce using rule 20 (stmt)


State 35

   21 stmt: skipStmt •

    $default  reduce using rule 21 (stmt)


State 36

    5 constDef: "const" identsym ":=" • numbersym

    numbersym  shift, and go to state 55


State 37

    8 constDefs: constDefs "," constDef •

    $default  reduce using rule 8 (constDefs)


State 38

   13 idents: idents "," • identsym

    identsym  shift, and go to state 56


State 39

   22 assignStmt: identsym "=" • expr ";"

    identsym   shift, and go to state 43
    numbersym  shift, and go to state 44
    "("        shift, and go to state 46

    expr    go to state 57
    term    go to state 51
    factor  go to state 52


State 40

   23 callStmt: "call" identsym •

    $default  reduce using rule 23 (callStmt)


State 41

   30 stmts: stmt •

    $default  reduce using rule 30 (stmts)


State 42

   24 beginStmt: "begin" stmts •
   31 stmts: stmts • stmt

    identsym  shift, and go to state 21
    "call"    shift, and go to state 22
    "begin"   shift, and go to state 23
    "while"   shift, and go to state 24
    "read"    shift, and go to state 25
    "write"   shift, and go to state 26
    "skip"    shift, and go to state 27

    identsym  [reduce using rule 24 (beginStmt)]
    "call"    [reduce using rule 24 (beginStmt)]
    "begin"   [reduce using rule 24 (beginStmt)]
    "while"   [reduce using rule 24 (beginStmt)]
    "read"    [reduce using rule 24 (beginStmt)]
    "write"   [reduce using rule 24 (beginStmt)]
    "skip"    [reduce using rule 24 (beginStmt)]
    $default  reduce using rule 24 (beginStmt)

    stmt        go to state 58
    assignStmt  go to state 29
    callStmt    go to state 30
    beginStmt   go to state 31
    whileStmt   go to state 32
    readStmt    go to state 33
    writeStmt   go to state 34
    skipStmt    go to state 35


State 43

   47 factor: identsym •

    $default  reduce using rule 47 (factor)


State 44

   48 factor: numbersym •

    $default  reduce using rule 48 (factor)


State 45

   34 oddCondition: "odd" • expr

    identsym   shift, and go to state 43
    numbersym  shift, and go to state 44
    "("        shift, and go to state 46

    expr    go to state 59
    term    go to state 51
    factor  go to state 52


State 46

   49 factor: "(" • expr ")"

    identsym   shift, and go to state 43
    numbersym  shift, and go to state 44
    "("        shift, and go to state 46

    expr    go to state 60
    term    go to state 51
    factor  go to state 52


State 47

   25 whileStmt: "while" condition • "do" stmt

    "do"  shift, and go to state 61


State 48

   32 condition: oddCondition •

    $default  reduce using rule 32 (condition)


State 49

   33 condition: relOpCondition •

    $default  reduce using rule 33 (condition)


State 50

   35 relOpCondition: expr • relOp expr

    "="   shift, and go to state 62
    "<>"  shift, and go to state 63
    "<"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">"   shift, and go to state 66
    ">="  shift, and go to state 67

    relOp  go to state 68


State 51

   42 expr: term •
   43     | term • relOp term
   45 term: term • "*" factor
   46     | term • "/" factor

    "*"   shift, and go to state 69
    "/"   shift, and go to state 70
    "="   shift, and go to state 62
    "<>"  shift, and go to state 63
    "<"   shift, and go to state 64
    "<="  shift, and go to state 65
    ">"   shift, and go to state 66
    ">="  shift, and go to state 67

    "="       [reduce using rule 42 (expr)]
    "<>"      [reduce using rule 42 (expr)]
    "<"       [reduce using rule 42 (expr)]
    "<="      [reduce using rule 42 (expr)]
    ">"       [reduce using rule 42 (expr)]
    ">="      [reduce using rule 42 (expr)]
    $default  reduce using rule 42 (expr)

    relOp  go to state 71


State 52

   44 term: factor •

    $default  reduce using rule 44 (term)


State 53

   26 readStmt: "read" identsym • ";"

    ";"  shift, and go to state 72


State 54

   27 writeStmt: "write" expr • ";"
   29          | "write" expr • ";"

    ";"  shift, and go to state 73


State 55

    5 constDef: "const" identsym ":=" numbersym •

    $default  reduce using rule 5 (constDef)


State 56

   13 idents: idents "," identsym •

    $default  reduce using rule 13 (idents)


State 57

   22 assignStmt: identsym "=" expr • ";"

    ";"  shift, and go to state 74


State 58

   31 stmts: stmts stmt •

    $default  reduce using rule 31 (stmts)


State 59

   34 oddCondition: "odd" expr •

    $default  reduce using rule 34 (oddCondition)


State 60

   49 factor: "(" expr • ")"

    ")"  shift, and go to state 75


State 61

   25 whileStmt: "while" condition "do" • stmt

    identsym  shift, and go to state 21
    "call"    shift, and go to state 22
    "begin"   shift, and go to state 23
    "while"   shift, and go to state 24
    "read"    shift, and go to state 25
    "write"   shift, and go to state 26
    "skip"    shift, and go to state 27

    stmt        go to state 76
    assignStmt  go to state 29
    callStmt    go to state 30
    beginStmt   go to state 31
    whileStmt   go to state 32
    readStmt    go to state 33
    writeStmt   go to state 34
    skipStmt    go to state 35


State 62

   36 relOp: "=" •

    $default  reduce using rule 36 (relOp)


State 63

   37 relOp: "<>" •

    $default  reduce using rule 37 (relOp)


State 64

   38 relOp: "<" •

    $default  reduce using rule 38 (relOp)


State 65

   39 relOp: "<=" •

    $default  reduce using rule 39 (relOp)


State 66

   40 relOp: ">" •

    $default  reduce using rule 40 (relOp)


State 67

   41 relOp: ">=" •

    $default  reduce using rule 41 (relOp)


State 68

   35 relOpCondition: expr relOp • expr

    identsym   shift, and go to state 43
    numbersym  shift, and go to state 44
    "("        shift, and go to state 46

    expr    go to state 77
    term    go to state 51
    factor  go to state 52


State 69

   45 term: term "*" • factor

    identsym   shift, and go to state 43
    numbersym  shift, and go to state 44
    "("        shift, and go to state 46

    factor  go to state 78


State 70

   46 term: term "/" • factor

    identsym   shift, and go to state 43
    numbersym  shift, and go to state 44
    "("        shift, and go to state 46

    factor  go to state 79


State 71

   43 expr: term relOp • term

    identsym   shift, and go to state 43
    numbersym  shift, and go to state 44
    "("        shift, and go to state 46

    term    go to state 80
    factor  go to state 52


State 72

   26 readStmt: "read" identsym ";" •

    $default  reduce using rule 26 (readStmt)


State 73

   27 writeStmt: "write" expr ";" •
   29          | "write" expr ";" •

    $end      reduce using rule 27 (writeStmt)
    $end      [reduce using rule 29 (writeStmt)]
    identsym  reduce using rule 27 (writeStmt)
    identsym  [reduce using rule 29 (writeStmt)]
    "call"    reduce using rule 27 (writeStmt)
    "call"    [reduce using rule 29 (writeStmt)]
    "begin"   reduce using rule 27 (writeStmt)
    "begin"   [reduce using rule 29 (writeStmt)]
    "while"   reduce using rule 27 (writeStmt)
    "while"   [reduce using rule 29 (writeStmt)]
    "read"    reduce using rule 27 (writeStmt)
    "read"    [reduce using rule 29 (writeStmt)]
    "write"   reduce using rule 27 (writeStmt)
    "write"   [reduce using rule 29 (writeStmt)]
    "skip"    reduce using rule 27 (writeStmt)
    "skip"    [reduce using rule 29 (writeStmt)]
    $default  reduce using rule 27 (writeStmt)


State 74

   22 assignStmt: identsym "=" expr ";" •

    $default  reduce using rule 22 (assignStmt)


State 75

   49 factor: "(" expr ")" •

    $default  reduce using rule 49 (factor)


State 76

   25 whileStmt: "while" condition "do" stmt •

    $default  reduce using rule 25 (whileStmt)


State 77

   35 relOpCondition: expr relOp expr •

    $default  reduce using rule 35 (relOpCondition)


State 78

   45 term: term "*" factor •

    $default  reduce using rule 45 (term)


State 79

   46 term: term "/" factor •

    $default  reduce using rule 46 (term)


State 80

   43 expr: term relOp term •
   45 term: term • "*" factor
   46     | term • "/" factor

    "*"  shift, and go to state 69
    "/"  shift, and go to state 70

    $default  reduce using rule 43 (expr)
